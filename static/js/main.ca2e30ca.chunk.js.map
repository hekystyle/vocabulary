{"version":3,"sources":["services/dictionaryApi.ts","routes/record/DefinitionsList.tsx","routes/list/reducer.ts","routes/record/Page.tsx","routes/record/Router.tsx","hooks/useTypedSelector.ts","components/Table.tsx","routes/list/Page.tsx","routes/list/index.ts","routes/list/Router.tsx","components/Button.tsx","components/Card.tsx","components/CardBody.tsx","utils/utils.ts","routes/practice/reducer.ts","utils/shuffle.ts","routes/practice/PracticeSession.tsx","routes/practice/useSpeech.ts","routes/practice/Configuration.tsx","routes/practice/Page.tsx","routes/practice/Router.tsx","NavBar.tsx","App.tsx","reportWebVitals.ts","reducer.ts","persistence.ts","index.tsx"],"names":["DictionaryApi","controller","AbortController","this","abort","word","fetch","headers","Accept","signal","response","json","StyledUl","styled","ul","DefinitionsList","props","onPartOfSpeechClick","onDefinitionClick","useState","entry","setEntry","useEffect","api","then","result","catch","reason","console","error","undefined","meanings","map","meaning","i","onClick","partOfSpeech","definitions","definition","j","dictionarySlice","createSlice","name","initialState","reducers","create","reducer","state","action","concat","payload","prepare","id","Date","now","update","findIndex","p","delete","filter","answer","entity","isCorrect","record","find","answersCount","correctAnswersCount","tableSlice","page","recordsReducer","combineReducers","table","RecordPage","useParams","editedEntry","useSelector","s","dictionary","parseInt","translation","history","useHistory","navigateRoot","push","dispatch","useDispatch","handleChange","values","placeholder","value","onChange","e","target","TextArea","type","actions","danger","RecordRouter","path","useRouteMatch","component","to","useTypedSelector","Table","Component","ListPage","columns","title","dataIndex","ellipsis","showTitle","render","_","PlusOutlined","EditOutlined","onConfirm","DeleteOutlined","items","sort","a","b","records","dataSource","size","rowKey","pagination","defaultCurrent","ListRouter","Button","theme","children","className","rest","Card","CardBody","ScoreAlgorithm","SCORE_ALGO_MAP","relative","Math","floor","absolute","config","isActive","stack","isRevealed","sessionSlice","start","terms","computedRecords","r","score","scoreAlgorithm","groupWith","list","array","random","reduce","reveal","next","pop","close","practiceReducer","session","OverflowableCardBody","Row","div","PracticeSession","isAnswerRevealed","practice","actualRecord","last","speak","synthesis","window","speechSynthesis","cancel","text","u","SpeechSynthesisUtterance","useSpeech","playAfterReveal","handleAnswerButtonClick","Configuration","setConfig","c","options","label","onSelect","option","checked","checkedChildren","unCheckedChildren","Layout","PracticePage","PracticeRouter","exact","navItems","NavBar","pathname","useLocation","Navbar","variant","expand","collapseOnSelect","Container","Toggle","style","flexGrow","Collapse","Nav","idx","Link","href","active","StyledApp","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","VOCABULARY_KEY","store","configureStore","preloadedState","localStorage","getItem","JSON","parse","loadState","subscribe","data","getState","setItem","stringify","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca2e30ca.chunk.js","sourcesContent":["export interface Word {\r\n  meanings: Meaning[];\r\n}\r\n\r\nexport interface Meaning {\r\n  partOfSpeech: string;\r\n  definitions: Definition[];\r\n}\r\n\r\nexport interface Definition {\r\n  definition: string;\r\n}\r\n\r\nexport class DictionaryApi {\r\n  private controller = new AbortController();\r\n\r\n  public abort() {\r\n    this.controller.abort();\r\n  }\r\n\r\n  public async word(word: string): Promise<Word[]> {\r\n    const response = await fetch(\r\n      `https://api.dictionaryapi.dev/api/v2/entries/en_US/${word}`,\r\n      {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n        },\r\n        signal: this.controller.signal,\r\n      }\r\n    );\r\n\r\n    return await response.json();\r\n  }\r\n}\r\n","import { useEffect, useState } from \"react\";\nimport { DictionaryApi, Word } from \"services/dictionaryApi\";\nimport styled from \"styled-components\";\n\nconst StyledUl = styled.ul`\n  color: white;\n`;\n\nexport interface DefinitionsListProps {\n  word: string;\n  onPartOfSpeechClick?: (partOfSpeech: string) => void;\n  onDefinitionClick?: (values: {\n    partOfSpeech: string;\n    definition: string;\n  }) => void;\n}\n\nexport function DefinitionsList(props: DefinitionsListProps) {\n  const { word, onPartOfSpeechClick, onDefinitionClick } = props;\n  const [entry, setEntry] = useState<Word | undefined>();\n\n  useEffect(() => {\n    if (word === \"\") {\n      setEntry(undefined);\n      return;\n    }\n    const api = new DictionaryApi();\n    api\n      .word(word)\n      .then((result) => {\n        setEntry(result[0]);\n      })\n      .catch((reason) => console.error(reason));\n\n    return () => api.abort();\n  }, [word]);\n\n  return (\n    <StyledUl>\n      {entry?.meanings.map((meaning, i) => (\n        <li key={i}>\n          <div\n            onClick={() =>\n              onPartOfSpeechClick && onPartOfSpeechClick(meaning.partOfSpeech)\n            }\n          >\n            {meaning.partOfSpeech}\n          </div>\n          <ul>\n            {meaning.definitions.map((definition, j) => (\n              <li\n                key={j}\n                onClick={() =>\n                  onDefinitionClick &&\n                  onDefinitionClick({\n                    partOfSpeech: meaning.partOfSpeech,\n                    definition: definition.definition,\n                  })\n                }\n              >\n                {definition.definition}\n              </li>\n            ))}\n          </ul>\n        </li>\n      ))}\n    </StyledUl>\n  );\n}\n","import { combineReducers, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { DictionaryEntry } from \"types/DictionaryEntry\";\r\nimport { Answer } from \"utils/utils\";\r\n\r\nconst initialState: DictionaryEntry[] = [];\r\n\r\nexport const dictionarySlice = createSlice({\r\n  name: \"dictionary\",\r\n  initialState,\r\n  reducers: {\r\n    create: {\r\n      reducer: (state, action: PayloadAction<DictionaryEntry>) =>\r\n        state.concat(action.payload),\r\n      prepare: (entry: DictionaryEntry) => {\r\n        return {\r\n          payload: {\r\n            ...entry,\r\n            id: Date.now(),\r\n          },\r\n        };\r\n      },\r\n    },\r\n    update: (state, action: PayloadAction<DictionaryEntry>) => {\r\n      const i = state.findIndex((p) => p.id === action.payload.id);\r\n      if (i > -1) state[i] = action.payload;\r\n      return state;\r\n    },\r\n    delete: (state, action: PayloadAction<DictionaryEntry>) =>\r\n      state.filter((p) => p.id !== action.payload.id),\r\n    answer: (\r\n      state,\r\n      { payload: { entity, isCorrect } }: PayloadAction<Answer<DictionaryEntry>>\r\n    ) => {\r\n      const record = state.find((p) => p.id === entity.id);\r\n      if (record) {\r\n        record.answersCount++;\r\n        if (isCorrect) record.correctAnswersCount++;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport interface TableState {\r\n  page: number;\r\n}\r\n\r\nexport const tableSlice = createSlice({\r\n  name: \"records/table\",\r\n  initialState: {\r\n    page: 1,\r\n  } as TableState,\r\n  reducers: {\r\n    update: (state, { payload }: PayloadAction<Partial<TableState>>) => ({\r\n      ...state,\r\n      ...payload,\r\n    }),\r\n  },\r\n});\r\n\r\nexport const recordsReducer = combineReducers({\r\n  table: tableSlice.reducer,\r\n});\r\n","import { Button, Input } from \"antd\";\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { DefinitionsList } from \"./DefinitionsList\";\nimport { AppState } from \"reducer\";\nimport { DictionaryEntry } from \"types/DictionaryEntry\";\nimport { dictionarySlice } from \"routes/list/reducer\";\n\nexport interface RecordPageProps {}\n\nexport function RecordPage(props: RecordPageProps) {\n  const { id } = useParams<{ id?: string }>();\n\n  const editedEntry = useSelector<AppState, DictionaryEntry | undefined>((s) =>\n    id ? s.dictionary.find((p) => p.id === parseInt(id)) : undefined\n  );\n\n  const [entry, setEntry] = useState<DictionaryEntry>({\n    id: 0,\n    word: \"\",\n    partOfSpeech: \"\",\n    translation: \"\",\n    definition: \"\",\n    answersCount: 0,\n    correctAnswersCount: 0,\n    ...(editedEntry ?? {}),\n  });\n\n  const history = useHistory();\n\n  const navigateRoot = () => history.push(\"/\");\n\n  const dispatch = useDispatch();\n  const handleConfirm = () => {\n    dispatch(\n      id\n        ? dictionarySlice.actions.update(entry)\n        : dictionarySlice.actions.create(entry)\n    );\n    navigateRoot();\n  };\n\n  const handleCancel = () => navigateRoot();\n\n  const handleChange = (values: Partial<DictionaryEntry>) =>\n    setEntry((entry) => ({ ...entry, ...values }));\n\n  return (\n    <>\n      <Input\n        placeholder=\"Word\"\n        value={entry.word}\n        onChange={(e) => handleChange({ word: e.target.value })}\n      />\n      <Input\n        placeholder=\"Part ot speech\"\n        value={entry.partOfSpeech}\n        onChange={(e) => handleChange({ partOfSpeech: e.target.value })}\n      />\n      <Input\n        placeholder=\"Translation\"\n        value={entry.translation}\n        onChange={(e) => handleChange({ translation: e.target.value })}\n      />\n      <Input.TextArea\n        placeholder=\"Definition\"\n        value={entry.definition}\n        onChange={(e) => handleChange({ definition: e.target.value })}\n      />\n      <Button type=\"primary\" onClick={handleConfirm}>\n        Confirm\n      </Button>\n      <Button type=\"primary\" danger onClick={handleCancel}>\n        Cancel\n      </Button>\n      <DefinitionsList\n        word={entry.word}\n        onPartOfSpeechClick={(partOfSpeech) => handleChange({ partOfSpeech })}\n        onDefinitionClick={(values) => handleChange(values)}\n      />\n    </>\n  );\n}\n","import { Redirect, Route, Switch, useRouteMatch } from \"react-router-dom\";\nimport { RecordPage } from \"./Page\";\n\nexport function RecordRouter() {\n  const { path } = useRouteMatch();\n\n  return (\n    <Switch>\n      <Route path={`${path}/:id?`} component={RecordPage} />\n      <Redirect to={`${path}`} />\n    </Switch>\n  );\n}\n","import { TypedUseSelectorHook, useSelector } from \"react-redux\";\r\nimport { AppState } from \"reducer\";\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<AppState> = useSelector;\r\n","import styled from \"styled-components\";\r\nimport { Table as AntdTable, TableProps } from \"antd\";\r\n\r\nexport function Table<T extends {}>(props: TableProps<T>) {\r\n  const Component = styled((props: TableProps<T>) => (\r\n    <AntdTable<T> {...props} />\r\n  ))`\r\n    .ant-pagination {\r\n      background-color: white;\r\n      padding: 16px 0;\r\n      margin: 0;\r\n    }\r\n  `;\r\n\r\n  return <Component {...props} />;\r\n}\r\n","import { DeleteOutlined, EditOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport { Button, Popconfirm, Tooltip } from \"antd\";\nimport { ColumnsType } from \"antd/lib/table\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { sort } from \"ramda\";\nimport { DictionaryEntry } from \"../../types/DictionaryEntry\";\nimport { AppState } from \"reducer\";\nimport { dictionarySlice, tableSlice } from \"./reducer\";\nimport { useTypedSelector } from \"hooks/useTypedSelector\";\nimport { Table } from \"components/Table\";\n\nexport interface ListPageProps {}\n\nexport function ListPage(props: ListPageProps) {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const columns: ColumnsType<DictionaryEntry> = [\n    {\n      title: \"Word\",\n      dataIndex: \"word\",\n      ellipsis: { showTitle: true },\n    },\n    {\n      title: (\n        <Tooltip title=\"Total answers / Correct answers\">\n          Total / Correct\n        </Tooltip>\n      ),\n      render: (_, record) => (\n        <>\n          {record.answersCount} / {record.correctAnswersCount}\n        </>\n      ),\n    },\n    {\n      title: () => (\n        <Button type=\"primary\" onClick={() => history.push(\"/record\")}>\n          <PlusOutlined />\n        </Button>\n      ),\n      render: (_, record) => (\n        <>\n          <Button onClick={() => history.push(`/record/${record.id}`)}>\n            <EditOutlined />\n          </Button>\n          <Popconfirm\n            title=\"Are you sure to delete this?\"\n            onConfirm={() => {\n              dispatch(dictionarySlice.actions.delete(record));\n            }}\n          >\n            <Button>\n              <DeleteOutlined />\n            </Button>\n          </Popconfirm>\n        </>\n      ),\n    },\n  ];\n  const items = useSelector<AppState, DictionaryEntry[]>((s) =>\n    sort((a, b) => (b.id ?? 0) - (a.id ?? 0), s.dictionary)\n  );\n  const page = useTypedSelector((s) => s.records.table.page);\n  return (\n    <Table\n      columns={columns}\n      dataSource={items}\n      size=\"middle\"\n      rowKey=\"id\"\n      pagination={{\n        defaultCurrent: page,\n        onChange: (page) => dispatch(tableSlice.actions.update({ page })),\n      }}\n    />\n  );\n}\n","import { ListRouter } from \"./Router\";\n\nexport default ListRouter;\n","import { Route, Switch, useRouteMatch } from \"react-router-dom\";\nimport { ListPage } from \"./Page\";\n\nexport function ListRouter() {\n  const { path } = useRouteMatch();\n\n  return (\n    <Switch>\n      <Route path={`${path}`} component={ListPage} />\n    </Switch>\n  );\n}\n","import { ButtonHTMLAttributes, DetailedHTMLProps } from \"react\";\n\nexport type Theme =\n  | \"primary\"\n  | \"secondary\"\n  | \"success\"\n  | \"warning\"\n  | \"danger\"\n  | \"info\";\n\ntype NativeButtonProps = DetailedHTMLProps<\n  ButtonHTMLAttributes<HTMLButtonElement>,\n  HTMLButtonElement\n>;\n\nexport interface ButtonProps extends NativeButtonProps {\n  /**\n   * @default \"primary\"\n   */\n  theme?: Theme;\n}\n\nexport function Button({ theme, children, className, ...rest }: ButtonProps) {\n  return (\n    <button\n      {...rest}\n      className={`btn btn-${theme ?? \"primary\"} ${className ?? \"\"}`}\n    >\n      {children}\n    </button>\n  );\n}\n","import { FC } from \"react\";\r\n\r\ntype NativeDivProps = React.DetailedHTMLProps<\r\n  React.HTMLAttributes<HTMLDivElement>,\r\n  HTMLDivElement\r\n>;\r\n\r\nexport type CardProps = NativeDivProps;\r\n\r\nexport const Card: FC<CardProps> = ({ children, className, ...rest }) => {\r\n  return (\r\n    <div className={\"card \" + (className ?? \"\")} {...rest}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","import { FC } from \"react\";\r\n\r\ntype NativeDivProps = React.DetailedHTMLProps<\r\n  React.HTMLAttributes<HTMLDivElement>,\r\n  HTMLDivElement\r\n>;\r\n\r\nexport type CardBodyProps = NativeDivProps;\r\n\r\nexport const CardBody: FC<CardBodyProps> = ({\r\n  children,\r\n  className,\r\n  ...rest\r\n}) => {\r\n  return (\r\n    <div className={\"card-body \" + (className ?? \"\")} {...rest}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","export interface Answer<T> {\r\n  isCorrect: boolean;\r\n  entity: T;\r\n}\r\n\r\nexport interface AnswersCountable {\r\n  answersCount: number;\r\n  correctAnswersCount: number;\r\n}\r\n\r\nexport function computeAnswersAbsoluteScore<T extends AnswersCountable>({\r\n  answersCount,\r\n  correctAnswersCount,\r\n}: T): number {\r\n  return answersCount + correctAnswersCount;\r\n}\r\n\r\nexport function computeAnswersRelativeScore<T extends AnswersCountable>({\r\n  answersCount,\r\n  correctAnswersCount,\r\n}: T): number {\r\n  return Math.floor((100 / answersCount) * correctAnswersCount);\r\n}\r\n\r\nexport interface Definable {\r\n  definition: string;\r\n}\r\n\r\nexport const hasDefinition = (definable: Definable) =>\r\n  definable.definition !== \"\";\r\n\r\nexport interface Translateable {\r\n  translation: string;\r\n}\r\n\r\nexport const hasTranslation = (translateable: Translateable) =>\r\n  translateable.translation !== \"\";\r\n","import { combineReducers, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { groupWith } from \"ramda\";\r\nimport { DictionaryEntry } from \"types/DictionaryEntry\";\r\nimport { shuffle } from \"utils/shuffle\";\r\nimport {\r\n  computeAnswersAbsoluteScore,\r\n  computeAnswersRelativeScore,\r\n  hasDefinition,\r\n  hasTranslation,\r\n} from \"utils/utils\";\r\n\r\nexport enum ScoreAlgorithm {\r\n  relative,\r\n  absolute,\r\n}\r\n\r\nconst SCORE_ALGO_MAP = {\r\n  [ScoreAlgorithm.relative]: computeAnswersRelativeScore,\r\n  [ScoreAlgorithm.absolute]: computeAnswersAbsoluteScore,\r\n};\r\n\r\nexport interface Config {\r\n  scoreAlgorithm: ScoreAlgorithm;\r\n  playAfterReveal: boolean;\r\n}\r\n\r\nexport interface SessionState {\r\n  config: Config | undefined;\r\n  isActive: boolean;\r\n  stack: number[];\r\n  isRevealed: boolean;\r\n}\r\n\r\nconst initialState: SessionState = {\r\n  config: undefined,\r\n  isActive: false,\r\n  stack: [],\r\n  isRevealed: false,\r\n};\r\n\r\nexport const sessionSlice = createSlice({\r\n  name: \"practice/session\",\r\n  initialState,\r\n  reducers: {\r\n    start: {\r\n      reducer: (\r\n        state,\r\n        {\r\n          payload: { stack, config },\r\n        }: PayloadAction<{ stack: number[]; config: Config }>\r\n      ) => ({\r\n        config,\r\n        isActive: true,\r\n        stack,\r\n        isRevealed: false,\r\n      }),\r\n      prepare: (config: Config, terms: DictionaryEntry[]) => {\r\n        const filteredTerms = terms.filter(\r\n          (p) => hasTranslation(p) || hasDefinition(p)\r\n        );\r\n\r\n        const computedRecords = filteredTerms\r\n          .map((r) => ({\r\n            id: r.id,\r\n            score: SCORE_ALGO_MAP[config.scoreAlgorithm](r),\r\n          }))\r\n          .sort((a, b) => b.score - a.score);\r\n\r\n        const stack = groupWith((a, b) => a.score === b.score, computedRecords)\r\n          .map((list) => shuffle(list))\r\n          .reduce<number[]>(\r\n            (stack, terms) => [...stack, ...terms.map((p) => p.id)],\r\n            []\r\n          );\r\n        return {\r\n          payload: {\r\n            config,\r\n            stack,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    reveal: (state) => ({\r\n      ...state,\r\n      isRevealed: true,\r\n    }),\r\n    next: (state) => {\r\n      state.stack.pop();\r\n      state.isRevealed = false;\r\n      return state;\r\n    },\r\n    close: () => ({\r\n      config: undefined,\r\n      isActive: false,\r\n      stack: [],\r\n      isRevealed: false,\r\n    }),\r\n  },\r\n});\r\n\r\nexport const practiceReducer = combineReducers({\r\n  session: sessionSlice.reducer,\r\n});\r\n","/**\r\n * Shuffle array and return new instance.\r\n */\r\nexport function shuffle<T>(array: T[]): T[] {\r\n  return [...array].sort(() => (Math.random() > 0.5 ? 1 : -1));\r\n}\r\n","import { FC } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { Button } from \"components/Button\";\nimport { Card } from \"components/Card\";\nimport { CardBody } from \"components/CardBody\";\nimport { useSpeech } from \"./useSpeech\";\nimport { useTypedSelector } from \"hooks/useTypedSelector\";\nimport { last } from \"ramda\";\nimport { sessionSlice } from \"./reducer\";\nimport { dictionarySlice } from \"routes/list/reducer\";\nimport { useHistory } from \"react-router\";\n\nconst OverflowableCardBody = styled(CardBody)`\n  overflow: auto;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 1rem;\n`;\n\ninterface PracticeSessionProps {}\n\nexport const PracticeSession: FC<PracticeSessionProps> = () => {\n  const isAnswerRevealed = useTypedSelector(\n    (s) => s.practice.session.isRevealed\n  );\n\n  const actualRecord = useTypedSelector((s) =>\n    s.dictionary.find((r) => r.id === last(s.practice.session.stack))\n  );\n\n  const { speak } = useSpeech();\n\n  const playAfterReveal = useTypedSelector(\n    (s) => s.practice.session.config?.playAfterReveal\n  );\n  const dispatch = useDispatch();\n\n  const handleRevealAnswer = () => {\n    dispatch(sessionSlice.actions.reveal());\n    if (actualRecord && playAfterReveal) speak(actualRecord.word);\n  };\n\n  const handleAnswerButtonClick = (isCorrect: boolean) => {\n    if (actualRecord)\n      dispatch(\n        dictionarySlice.actions.answer({\n          isCorrect,\n          entity: actualRecord,\n        })\n      );\n    dispatch(sessionSlice.actions.next());\n  };\n\n  const handleEndSessionButtonClick = () => {\n    dispatch(sessionSlice.actions.close());\n  };\n\n  const history = useHistory();\n  const handleEditButtonClick = () => {\n    history.push(`record/${actualRecord?.id}`);\n  };\n\n  return (\n    <>\n      {actualRecord && (\n        <>\n          <Card>\n            <CardBody className=\"text-center\">\n              <div>{actualRecord.translation}</div>\n              <div>\n                (<i>{actualRecord.partOfSpeech}</i>)\n              </div>\n            </CardBody>\n          </Card>\n          <Card>\n            <OverflowableCardBody className=\"text-center\">\n              {actualRecord.definition}\n            </OverflowableCardBody>\n          </Card>\n          <Card>\n            <CardBody className=\"text-center\">\n              {isAnswerRevealed ? (\n                <Row>\n                  {actualRecord.word}\n                  <Button onClick={() => speak(actualRecord.word)}>\n                    Play it again\n                  </Button>\n                </Row>\n              ) : (\n                \"?\"\n              )}\n            </CardBody>\n          </Card>\n          {!isAnswerRevealed ? (\n            <Button onClick={handleRevealAnswer}>Reveal answer</Button>\n          ) : (\n            <>\n              <Button\n                theme=\"success\"\n                onClick={() => handleAnswerButtonClick(true)}\n              >\n                I was correct\n              </Button>\n              <Button\n                theme=\"danger\"\n                onClick={() => handleAnswerButtonClick(false)}\n              >\n                I was incorrect\n              </Button>\n            </>\n          )}\n          <Button onClick={handleEditButtonClick}>Edit current term</Button>\n        </>\n      )}\n      <Button onClick={handleEndSessionButtonClick}>End session</Button>\n    </>\n  );\n};\n","import { useEffect } from \"react\";\n\nexport const useSpeech = () => {\n  const synthesis = window.speechSynthesis;\n\n  useEffect(() => () => synthesis.cancel(), [synthesis]);\n\n  return {\n    speak: (text: string) => {\n      synthesis.cancel();\n      const u = new SpeechSynthesisUtterance(text);\n      synthesis.speak(u);\n    },\n  };\n};\n","import { Select, Switch } from \"antd\";\nimport { Button } from \"components/Button\";\nimport { useTypedSelector } from \"hooks/useTypedSelector\";\nimport { FC, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { DictionaryEntry } from \"types/DictionaryEntry\";\nimport { Config, ScoreAlgorithm, sessionSlice } from \"./reducer\";\n\nexport interface ConfigurationProps {}\n\nexport const Configuration: FC<ConfigurationProps> = () => {\n  const [config, setConfig] = useState<Config>({\n    scoreAlgorithm: ScoreAlgorithm.relative,\n    playAfterReveal: false,\n  });\n\n  const dispatch = useDispatch();\n\n  const terms = useTypedSelector<DictionaryEntry[]>((s) => s.dictionary);\n\n  const handleStartSessionButtonClick = () => {\n    dispatch(sessionSlice.actions.start(config, terms));\n  };\n\n  const update = (config: Partial<Config>) =>\n    setConfig((c) => ({ ...c, ...config }));\n\n  const { scoreAlgorithm, playAfterReveal } = config;\n  return (\n    <>\n      <Select\n        value={scoreAlgorithm}\n        options={[\n          { value: ScoreAlgorithm.relative, label: \"relative\" },\n          { value: ScoreAlgorithm.absolute, label: \"absolute\" },\n        ]}\n        onSelect={(_, option) => update({ scoreAlgorithm: option.value })}\n      />\n      <Switch\n        checked={playAfterReveal}\n        checkedChildren={\"Play word after reveal\"}\n        unCheckedChildren={\"Play word after reveal\"}\n        onChange={(checked) => update({ playAfterReveal: checked })}\n      />\n      <Button onClick={handleStartSessionButtonClick}>Start session</Button>\n    </>\n  );\n};\n","import styled from \"styled-components\";\nimport { PracticeSession } from \"./PracticeSession\";\nimport { Configuration } from \"./Configuration\";\nimport { useTypedSelector } from \"hooks/useTypedSelector\";\n\nconst Layout = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n`;\n\nexport interface PracticePageProps {}\n\nexport function PracticePage(props: PracticePageProps) {\n  const isActive = useTypedSelector((s) => s.practice.session.isActive);\n\n  return <Layout>{isActive ? <PracticeSession /> : <Configuration />}</Layout>;\n}\n","import { Redirect, Route, Switch, useRouteMatch } from \"react-router-dom\";\nimport { PracticePage } from \"./Page\";\n\nexport function PracticeRouter() {\n  const { path } = useRouteMatch();\n\n  return (\n    <Switch>\n      <Route path={`${path}`} exact component={PracticePage} />\n      <Redirect to={path} />\n    </Switch>\n  );\n}\n","import React, { FC } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { Container, Nav, Navbar } from \"react-bootstrap\";\n\ninterface NavLink {\n  title: React.ReactNode;\n  path: string;\n}\n\nconst navItems: NavLink[] = [\n  {\n    title: \"List\",\n    path: \"/list\",\n  },\n  {\n    title: \"Practice\",\n    path: \"/practice\",\n  },\n];\n\nexport const NavBar: FC<{}> = () => {\n  const history = useHistory();\n\n  const { pathname } = useLocation();\n  return (\n    <Navbar variant=\"dark\" expand=\"lg\" collapseOnSelect>\n      <Container>\n        <Navbar.Toggle style={{ flexGrow: 1 }} />\n        <Navbar.Collapse>\n          <Nav>\n            {navItems.map(({ title, path }, idx) => (\n              <Nav.Link\n                key={idx}\n                href=\"#\"\n                active={path === pathname}\n                onClick={() => history.push(path)}\n              >\n                {title}\n              </Nav.Link>\n            ))}\n          </Nav>\n        </Navbar.Collapse>\n      </Container>\n    </Navbar>\n  );\n};\n","import { HashRouter, Redirect, Route, Switch } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { RecordRouter } from \"routes/record/Router\";\nimport ListRouter from \"./routes/list\";\nimport { PracticeRouter } from \"routes/practice/Router\";\nimport { NavBar } from \"NavBar\";\n\nconst StyledApp = styled.div`\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  font-size: calc(10px + 2vmin);\n`;\n\nexport function App() {\n  return (\n    <HashRouter>\n      <StyledApp className=\"bg-dark\">\n        <NavBar />\n        <Switch>\n          <Route path=\"/record\" component={RecordRouter} />\n          <Route path=\"/practice\" component={PracticeRouter} />\n          <Route path=\"/list\" component={ListRouter} />\n          <Redirect to=\"/list\" />\n        </Switch>\n      </StyledApp>\n    </HashRouter>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from \"@reduxjs/toolkit\";\r\nimport { dictionarySlice, recordsReducer } from \"routes/list/reducer\";\r\nimport { practiceReducer } from \"routes/practice/reducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  records: recordsReducer,\r\n  dictionary: dictionarySlice.reducer,\r\n  practice: practiceReducer,\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n","import { DictionaryEntry } from \"types/DictionaryEntry\";\r\n\r\nconst VOCABULARY_KEY = \"vocabulary\";\r\n\r\nexport function loadState(): DictionaryEntry[] | undefined {\r\n  const json = localStorage.getItem(VOCABULARY_KEY);\r\n\r\n  //TODO: add validation\r\n  return json ? JSON.parse(json) : undefined;\r\n}\r\n\r\nexport function persistState(data: DictionaryEntry[]) {\r\n  localStorage.setItem(VOCABULARY_KEY, JSON.stringify(data));\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"antd/dist/antd.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { Provider } from \"react-redux\";\nimport { rootReducer } from \"./reducer\";\nimport { loadState, persistState } from \"persistence\";\n\nconst store = configureStore({\n  reducer: rootReducer,\n  preloadedState: { dictionary: loadState() },\n});\n\nstore.subscribe(() => {\n  const state = store.getState();\n  persistState(state.dictionary);\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}