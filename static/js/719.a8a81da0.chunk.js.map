{"version":3,"file":"static/js/719.a8a81da0.chunk.js","mappings":"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","sources":["utils/options.ts","components/Tags.tsx","routes/records/UpdatePage.tsx","routes/records/utils/hasReturnUrlField.ts","services/dictionaryApi.ts","routes/records/components/DefinitionsList.tsx","routes/records/components/Form.tsx","utils/queryKeys.ts"],"sourcesContent":["import { DefaultOptionType } from 'antd/es/select';\n\nexport function options<T extends DefaultOptionType['value']>(values: readonly T[]): DefaultOptionType[] {\n  return values.map(value => ({\n    label: value,\n    value,\n  }));\n}\n","import { Select, SelectProps } from 'antd';\nimport { useServices } from 'containers/Services';\nimport { FC, useState } from 'react';\nimport { useQuery } from 'react-query';\nimport { options } from 'utils/options';\nimport { QUERY_KEYS } from 'utils/queryKeys';\n\nexport const Tags: FC<Pick<SelectProps<string[]>, 'defaultValue' | 'value' | 'onChange' | 'style'>> = ({\n  defaultValue,\n  onChange,\n  value,\n  style,\n}) => {\n  const [search, setSearch] = useState<string>('');\n  const { termsRepository } = useServices();\n\n  const { data: uniqueTagsOptions, isFetching: loadingUniqueTags } = useQuery(\n    QUERY_KEYS.terms.tags.all(),\n    ({ signal }) => termsRepository.getUniqueTags(search, signal),\n    {\n      select: options,\n    },\n  );\n\n  return (\n    <Select\n      allowClear\n      aria-label=\"Tags\"\n      defaultValue={defaultValue}\n      loading={loadingUniqueTags}\n      mode=\"tags\"\n      options={uniqueTagsOptions}\n      placeholder=\"Tags\"\n      style={style}\n      value={value}\n      onChange={onChange}\n      onSearch={setSearch}\n    />\n  );\n};\n","import { FC } from 'react';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport { isObject } from 'utils/isObject';\nimport { SpinnerBox } from 'components/SpinnerBox';\nimport { useServices } from 'containers/Services';\nimport { useIsMutating, useMutation, useQuery } from 'react-query';\nimport { QUERY_KEYS } from 'utils/queryKeys';\nimport { hasReturnUrlField } from './utils/hasReturnUrlField';\nimport { Form, FormProps } from './components/Form';\n\nexport default (() => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { termsRepository } = useServices();\n  const { id: serializedId } = useParams<{ id?: string }>();\n  const id = serializedId ? parseInt(serializedId, 10) : NaN;\n  const isUpdating = useIsMutating(QUERY_KEYS.terms.id(id));\n\n  const {\n    isFetching,\n    error,\n    data: term,\n    status,\n  } = useQuery(QUERY_KEYS.terms.id(id), async ({ signal }) => await termsRepository.getById(id, signal), {\n    enabled: !Number.isNaN(id),\n    onError: e => console.error(e),\n  });\n\n  const { mutateAsync: update } = useMutation(QUERY_KEYS.terms.id(id), termsRepository.update.bind(termsRepository), {\n    onError: e => console.error(e),\n  });\n\n  const navigateBack = () => {\n    if (isObject(location.state) && hasReturnUrlField(location.state)) {\n      navigate(location.state.returnUrl);\n    } else {\n      navigate('/records');\n    }\n  };\n\n  const handleSubmit: FormProps['onSubmit'] = values => {\n    update(values).then(navigateBack).catch(console.error);\n  };\n\n  const handleCancel = () => navigateBack();\n\n  if (isUpdating) return <SpinnerBox label=\"Updating ...\" />;\n  if (isFetching) return <SpinnerBox label=\"Loading ...\" />;\n\n  switch (status) {\n    case 'idle':\n      return <p>Idle</p>;\n    case 'loading':\n      return <SpinnerBox label=\"Loading ...\" />;\n    case 'error':\n      return <p>Error: {error instanceof Error ? error.message : 'Unknown'}</p>;\n    case 'success':\n      if (term === undefined) return <p>Term not found by ID: {serializedId}</p>;\n      return <Form defaultValue={term} onCancel={handleCancel} onSubmit={handleSubmit} />;\n    default:\n      return <p>Unknown status: {status}</p>;\n  }\n}) satisfies FC;\n","import { RETURN_URL_FIELD } from '../constants';\n\nexport function hasReturnUrlField(obj: Record<string, unknown>): obj is Record<typeof RETURN_URL_FIELD, string> {\n  return typeof (obj as Record<typeof RETURN_URL_FIELD, unknown>).returnUrl === 'string';\n}\n","/* eslint-disable max-classes-per-file */\nimport { plainToInstance, Type } from 'class-transformer';\nimport { IsArray, IsDefined, IsString, IsUrl, ValidateNested, validateOrReject } from 'class-validator';\n\nexport class Definition {\n  @IsDefined()\n  @IsString()\n  definition!: string;\n\n  @IsDefined()\n  @IsArray()\n  @IsString({ each: true })\n  synonyms!: string[];\n\n  @IsDefined()\n  @IsArray()\n  @IsString({ each: true })\n  antonyms!: string[];\n\n  @IsString()\n  example = '';\n}\n\nexport class Meaning {\n  @IsDefined()\n  @IsString()\n  partOfSpeech!: string;\n\n  @IsDefined()\n  @IsArray()\n  @Type(() => Definition)\n  @ValidateNested({ each: true })\n  definitions!: Definition[];\n\n  @IsDefined()\n  @IsArray()\n  @IsString({ each: true })\n  synonyms!: string[];\n\n  @IsDefined()\n  @IsArray()\n  @IsString({ each: true })\n  antonyms!: string[];\n}\n\nclass License {\n  @IsDefined()\n  @IsString()\n  name!: string;\n\n  @IsDefined()\n  @IsUrl()\n  url!: string;\n}\n\nclass Phonetic {\n  @IsDefined()\n  @IsString()\n  text!: string;\n\n  @IsDefined()\n  @IsUrl()\n  audio!: string;\n\n  @IsDefined()\n  @IsUrl()\n  sourceUrl!: string;\n\n  @IsDefined()\n  @Type(() => License)\n  @ValidateNested()\n  license!: License;\n}\n\nexport class Word {\n  @IsDefined()\n  @IsString()\n  word!: string;\n\n  @IsDefined()\n  @IsString()\n  phonetic!: string;\n\n  @IsDefined()\n  @IsArray()\n  @Type(() => Phonetic)\n  @ValidateNested({ each: true })\n  phonetics!: Phonetic[];\n\n  @IsDefined()\n  @IsArray()\n  @Type(() => Meaning)\n  @ValidateNested({ each: true })\n  meanings!: Meaning[];\n\n  @IsDefined()\n  @Type(() => License)\n  @ValidateNested()\n  license!: License;\n\n  @IsDefined()\n  @IsArray()\n  @IsString({ each: true })\n  sourceUrls!: string[];\n}\n\nexport const fetchWord = async (word: string, { signal }: Pick<RequestInit, 'signal'> = {}): Promise<Word[]> => {\n  const response = await fetch(`https://api.dictionaryapi.dev/api/v2/entries/en_US/${encodeURIComponent(word)}`, {\n    headers: {\n      Accept: 'application/json',\n    },\n    signal,\n  });\n\n  const result: unknown = await response.json();\n\n  if (!Array.isArray(result)) throw new Error(`Invalid response, expected array, got ${typeof result}`);\n\n  const instances = plainToInstance(Word, result);\n\n  await Promise.all(instances.map(async i => await validateOrReject(i)));\n\n  return instances;\n};\n","import { FC } from 'react';\nimport { useQuery } from 'react-query';\nimport type { Word } from 'services/dictionaryApi';\nimport * as DictionaryApi from 'services/dictionaryApi';\nimport styled from 'styled-components';\nimport { QUERY_KEYS } from 'utils/queryKeys';\n\nconst StyledUl = styled.ul`\n  color: white;\n`;\n\nexport interface DefinitionsListProps {\n  word: string;\n  onPartOfSpeechClick?: (partOfSpeech: string) => void;\n  onDefinitionClick?: (values: { partOfSpeech: string; definition: string }) => void;\n}\n\nexport const DefinitionsList: FC<DefinitionsListProps> = props => {\n  const { word, onPartOfSpeechClick, onDefinitionClick } = props;\n\n  const { data: entry } = useQuery(\n    QUERY_KEYS.dictionary.word(word),\n    async ({ signal }): Promise<Word | undefined> => {\n      const result = await DictionaryApi.fetchWord(word, { signal });\n      return result[0];\n    },\n    {\n      onError: e => console.error(e),\n      enabled: word !== '',\n    },\n  );\n\n  return (\n    <StyledUl key={word}>\n      {entry?.meanings.map(meaning => (\n        <li key={meaning.partOfSpeech}>\n          <div\n            role=\"button\"\n            tabIndex={0}\n            onClick={() => onPartOfSpeechClick?.(meaning.partOfSpeech)}\n            onKeyPress={() => onPartOfSpeechClick?.(meaning.partOfSpeech)}\n          >\n            {meaning.partOfSpeech}\n          </div>\n          <ul>\n            {meaning.definitions.map(definition => (\n              <li key={definition.definition}>\n                <div\n                  role=\"button\"\n                  tabIndex={0}\n                  onClick={() =>\n                    onDefinitionClick?.({\n                      partOfSpeech: meaning.partOfSpeech,\n                      definition: definition.definition,\n                    })\n                  }\n                  onKeyPress={() =>\n                    onDefinitionClick?.({\n                      partOfSpeech: meaning.partOfSpeech,\n                      definition: definition.definition,\n                    })\n                  }\n                >\n                  {definition.definition}\n                </div>\n              </li>\n            ))}\n          </ul>\n        </li>\n      ))}\n    </StyledUl>\n  );\n};\n","import { useState, FC /* useMemo */ } from 'react';\nimport { Button, Input /* AutoComplete */ } from 'antd';\nimport { Term } from 'types/Term';\n// import { useServices } from 'containers/Services';\n// import { useQuery } from 'react-query';\n// import { QUERY_KEYS } from 'utils/queryKeys';\nimport { Tags } from 'components/Tags';\nimport { DefinitionsList } from './DefinitionsList';\n// import { options } from '../utils/options';\n\nexport interface FormProps {\n  defaultValue?: Term;\n  onSubmit: (values: Term) => void;\n  onCancel: () => void;\n}\n\nexport const Form: FC<FormProps> = ({ defaultValue: term, onCancel, onSubmit }) => {\n  // const { termsRepository } = useServices();\n\n  const [entry, setEntry] = useState<Term>({\n    word: '',\n    partOfSpeech: '',\n    translation: '',\n    definition: '',\n    answersCount: 0,\n    correctAnswersCount: 0,\n    tags: [],\n    ...(term ?? {}),\n  });\n\n  // const { data: partsOfSpeech } = useQuery(QUERY_KEYS.terms.all(), () => termsRepository.getUniquePartsOfSpeech(), {\n  //   onError: e => console.error(e),\n  // });\n  // const partOfSpeechOptions = useMemo(() => options(partsOfSpeech ?? []), [partsOfSpeech]);\n\n  // const { data: words } = useQuery(\n  //   QUERY_KEYS.terms.filter({ word: entry.word }),\n  //   () => termsRepository.getWords(entry.word),\n  //   {\n  //     onError: e => console.error(e),\n  //   },\n  // );\n  // const wordsOptions = useMemo(() => options(words ?? []), [words]);\n\n  const handleChange = (values: Partial<Term>) => setEntry(prevEntry => ({ ...prevEntry, ...values }));\n\n  const handleConfirm = () => onSubmit(entry);\n\n  return (\n    <>\n      <Input\n        allowClear\n        aria-label=\"Word\"\n        // options={wordsOptions}\n        placeholder=\"Word\"\n        style={{ width: '100%' }}\n        value={entry.word}\n        onChange={e => handleChange({ word: e.target.value })}\n        // onSelect={(value: string) => handleChange({ word: value })}\n      />\n      <Input\n        allowClear\n        aria-label=\"Part of speech\"\n        // options={partOfSpeechOptions}\n        placeholder=\"Part ot speech\"\n        style={{ width: '100%' }}\n        value={entry.partOfSpeech}\n        onChange={e => handleChange({ partOfSpeech: e.target.value })}\n        // onSelect={(value: string) => handleChange({ partOfSpeech: value })}\n      />\n      <Input\n        aria-label=\"Translation\"\n        placeholder=\"Translation\"\n        value={entry.translation}\n        onChange={e => handleChange({ translation: e.target.value })}\n      />\n      <Input.TextArea\n        aria-label=\"Definition\"\n        placeholder=\"Definition\"\n        value={entry.definition}\n        onChange={e => handleChange({ definition: e.target.value })}\n      />\n      <Tags style={{ width: '100%' }} value={entry.tags} onChange={tags => handleChange({ tags })} />\n      <Button.Group style={{ display: 'flex' }}>\n        <Button block type=\"primary\" onClick={handleConfirm}>\n          Confirm\n        </Button>\n        <Button block danger type=\"primary\" onClick={onCancel}>\n          Cancel\n        </Button>\n      </Button.Group>\n      <DefinitionsList\n        word={entry.word}\n        onDefinitionClick={values => handleChange(values)}\n        onPartOfSpeechClick={partOfSpeech => handleChange({ partOfSpeech })}\n      />\n    </>\n  );\n};\n","import { Term } from 'types/Term';\n\nexport const QUERY_KEYS = {\n  terms: {\n    all: () => ['terms'] as const,\n    filter: (filter: Record<string, unknown>) => [...QUERY_KEYS.terms.all(), filter] as const,\n    id: (id: Term['id']) => [...QUERY_KEYS.terms.all(), id] as const,\n    tags: {\n      all: () => [...QUERY_KEYS.terms.all(), 'tags'] as const,\n    },\n  },\n  dictionary: {\n    all: () => ['dictionary'] as const,\n    word: (word: string) => [...QUERY_KEYS.dictionary.all(), word] as const,\n  },\n};\n"],"names":["options","values","map","value","label","Tags","defaultValue","onChange","style","useState","search","setSearch","termsRepository","useServices","useQuery","QUERY_KEYS","signal","getUniqueTags","select","uniqueTagsOptions","data","loadingUniqueTags","isFetching","allowClear","loading","mode","placeholder","onSearch","navigate","useNavigate","location","useLocation","serializedId","useParams","id","parseInt","NaN","isUpdating","useIsMutating","getById","enabled","Number","isNaN","onError","e","console","error","term","status","update","useMutation","bind","mutateAsync","navigateBack","isObject","state","returnUrl","SpinnerBox","Error","message","undefined","Form","onCancel","onSubmit","then","catch","Definition","IsDefined","IsString","IsArray","each","Meaning","Type","ValidateNested","License","IsUrl","Phonetic","Word","fetchWord","word","fetch","encodeURIComponent","headers","Accept","response","json","result","Array","isArray","instances","plainToInstance","Promise","all","i","validateOrReject","StyledUl","styled","DefinitionsList","props","onPartOfSpeechClick","onDefinitionClick","DictionaryApi","entry","meanings","meaning","role","tabIndex","onClick","partOfSpeech","onKeyPress","definitions","definition","translation","answersCount","correctAnswersCount","tags","setEntry","handleChange","prevEntry","width","target","display","block","type","danger","terms","filter","dictionary"],"sourceRoot":""}