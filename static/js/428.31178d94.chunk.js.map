{"version":3,"file":"static/js/428.31178d94.chunk.js","mappings":"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","sources":["routes/records/components/table/AddButton.tsx","routes/records/components/table/Actions.tsx","routes/records/components/Table.tsx","utils/toArray.ts","routes/records/ListPage.tsx","utils/queryKeys.ts"],"sourcesContent":["import { FC } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\n\nexport const AddButton: FC = () => {\n  const navigate = useNavigate();\n\n  return <Button aria-label=\"Add\" icon={<PlusOutlined />} type=\"primary\" onClick={() => navigate('/records/create')} />;\n};\n","import { FC, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons';\nimport { Button, Modal, Space } from 'antd';\nimport { Term } from 'types/Term';\nimport { useIsMutating, useMutation, useQueryClient } from 'react-query';\nimport { useServices } from 'containers/Services';\nimport { QUERY_KEYS } from 'utils/queryKeys';\n\nexport interface ActionsProps {\n  record: Term;\n}\n\nexport const Actions: FC<ActionsProps> = ({ record }) => {\n  const navigate = useNavigate();\n  const { termsRepository } = useServices();\n  const queryClient = useQueryClient();\n  const isMutating = useIsMutating(['terms']) > 0;\n\n  const { mutate: deleteTerm } = useMutation(\n    QUERY_KEYS.terms.id(record.id),\n    async () => (record.id ? await termsRepository.delete(record.id) : undefined),\n    {\n      onSuccess: () => queryClient.invalidateQueries(QUERY_KEYS.terms.all()),\n      onError: e => console.error(e),\n    },\n  );\n\n  const handleDeleteButtonClick = useCallback(() => {\n    Modal.confirm({\n      title: (\n        <>\n          Are you sure to delete <b>{record.word}</b>?\n        </>\n      ),\n      onOk: () => deleteTerm(undefined),\n      okButtonProps: { danger: true },\n    });\n  }, [deleteTerm, record.word]);\n\n  return (\n    <Space>\n      <Button\n        aria-label=\"edit\"\n        disabled={isMutating}\n        icon={<EditOutlined />}\n        loading={isMutating}\n        onClick={() => record.id && navigate(`/records/${record.id}`)}\n      />\n      <Button\n        danger\n        aria-label=\"delete\"\n        disabled={isMutating}\n        icon={<DeleteOutlined />}\n        loading={isMutating}\n        onClick={handleDeleteButtonClick}\n      />\n    </Space>\n  );\n};\n","import { Tooltip } from 'antd';\nimport { ColumnsType } from 'antd/es/table';\nimport { Table } from 'components/Table';\nimport { FC, useMemo } from 'react';\nimport { SpinnerBox } from 'components/SpinnerBox';\nimport { useServices } from 'containers/Services';\nimport { useQuery } from 'react-query';\nimport { QUERY_KEYS } from 'utils/queryKeys';\nimport { useFilter } from 'containers/Filter';\nimport { SortOrder } from 'antd/es/table/interface';\nimport { toArray } from 'utils/toArray';\nimport { Term } from '../../../types/Term';\nimport { AddButton } from './table/AddButton';\nimport { Actions } from './table/Actions';\n\nconst getColumns = ({ sortField, sortOrder }: { sortField: string; sortOrder: SortOrder }): ColumnsType<Term> => [\n  {\n    key: 'word',\n    title: 'Word',\n    dataIndex: 'word',\n    ellipsis: { showTitle: true },\n    sorter: true,\n    sortOrder: sortField === 'word' ? sortOrder : null,\n  },\n  {\n    key: 'answersCount',\n    dataIndex: 'answersCount',\n    title: <Tooltip title=\"Total answers count\">Total</Tooltip>,\n    sorter: true,\n    sortOrder: sortField === 'answersCount' ? sortOrder : null,\n    render: (_, record) => record.answersCount,\n  },\n  {\n    key: 'correctAnswersCount',\n    dataIndex: 'correctAnswersCount',\n    title: <Tooltip title=\"Correct answers count\">Correct</Tooltip>,\n    sorter: true,\n    sortOrder: sortField === 'correctAnswersCount' ? sortOrder : null,\n    render: (_, record) => record.correctAnswersCount,\n  },\n  {\n    key: 'createdAt',\n    dataIndex: 'createdAt',\n    title: 'Created at',\n    sorter: true,\n    sortOrder: sortField === 'createdAt' ? sortOrder : null,\n    render: (_, record) => record.createdAt?.toLocaleDateString(),\n  },\n  {\n    key: 'actions',\n    align: 'right',\n    fixed: 'right',\n    width: '0',\n    title: () => <AddButton />,\n    render: (_, record) => <Actions record={record} />,\n  },\n];\n\nconst PAGE_SIZE = 20 as const;\n\nexport const ListTable: FC = () => {\n  const {\n    filter: { page: currentPage, sortField = 'createdAt', sortOrder = 'descend' },\n    update: updateFilter,\n  } = useFilter();\n  const { termsRepository } = useServices();\n\n  const {\n    error,\n    data,\n    isFetching: loading,\n  } = useQuery(\n    QUERY_KEYS.terms.filter({ pageSize: PAGE_SIZE, page: currentPage, sortField, sortOrder }),\n    ({ signal }) => termsRepository.get({ pageSize: PAGE_SIZE, page: currentPage ?? 1, sortField, sortOrder }, signal),\n    {\n      onError: e => console.error(e),\n    },\n  );\n\n  const columns = useMemo(() => getColumns({ sortOrder, sortField }), [sortField, sortOrder]);\n\n  if (loading) return <SpinnerBox label=\"Loading terms ...\" />;\n\n  if (error) return <p>Error: {error instanceof Error ? error.message : 'Unknown'}</p>;\n\n  const { terms, total } = data ?? {};\n  return (\n    <Table\n      columns={columns}\n      dataSource={terms}\n      pagination={{\n        total,\n        pageSize: PAGE_SIZE,\n        defaultCurrent: currentPage,\n        onChange: page => updateFilter({ page }),\n      }}\n      rowKey={item => item.id ?? 'undefined'}\n      scroll={{ x: true }}\n      size=\"middle\"\n      onChange={(_, __, sorter) => {\n        const { field, order } = toArray(sorter)[0];\n\n        updateFilter({\n          sortField: field?.toString(),\n          sortOrder: order ?? 'ascend',\n        });\n      }}\n    />\n  );\n};\n","export const toArray = <T>(value: T | readonly T[]): readonly T[] => (value instanceof Array ? value : [value]);\n","import { Col, Row } from 'antd';\nimport { FC } from 'react';\nimport { ListTable } from './components/Table';\n\nexport default (() => (\n  <Row justify=\"center\">\n    <Col flex=\"920px\">\n      <ListTable />\n    </Col>\n  </Row>\n)) satisfies FC;\n","import { Term } from 'types/Term';\n\nexport const QUERY_KEYS = {\n  terms: {\n    all: () => ['terms'] as const,\n    filter: (filter: Record<string, unknown>) => [...QUERY_KEYS.terms.all(), filter] as const,\n    id: (id: Term['id']) => [...QUERY_KEYS.terms.all(), id] as const,\n    tags: {\n      all: () => [...QUERY_KEYS.terms.all(), 'tags'] as const,\n    },\n  },\n  dictionary: {\n    all: () => ['dictionary'] as const,\n    word: (word: string) => [...QUERY_KEYS.dictionary.all(), word] as const,\n  },\n};\n"],"names":["AddButton","navigate","useNavigate","icon","PlusOutlined","type","onClick","Actions","record","termsRepository","useServices","queryClient","useQueryClient","isMutating","useIsMutating","deleteTerm","useMutation","QUERY_KEYS","id","delete","undefined","onSuccess","invalidateQueries","onError","e","console","error","mutate","handleDeleteButtonClick","useCallback","Modal","title","word","onOk","okButtonProps","danger","disabled","EditOutlined","loading","DeleteOutlined","ListTable","useFilter","filter","currentPage","page","sortField","sortOrder","updateFilter","update","useQuery","pageSize","signal","get","data","isFetching","columns","useMemo","key","dataIndex","ellipsis","showTitle","sorter","render","_","answersCount","correctAnswersCount","createdAt","toLocaleDateString","align","fixed","width","getColumns","SpinnerBox","label","Error","message","terms","total","dataSource","pagination","defaultCurrent","onChange","rowKey","item","scroll","x","size","__","value","Array","field","order","toString","justify","flex","all","tags","dictionary"],"sourceRoot":""}