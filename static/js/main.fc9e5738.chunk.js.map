{"version":3,"sources":["routes/record/DefinitionsList.tsx","reducer.ts","routes/record/Page.tsx","routes/record/Router.tsx","utils.ts","routes/list/Page.tsx","routes/list/index.ts","routes/list/Router.tsx","components/Button.tsx","components/Card.tsx","components/CardBody.tsx","routes/practice/PracticeSession.tsx","routes/practice/Page.tsx","routes/practice/Router.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["StyledUl","styled","ul","DefinitionsList","props","word","onPartOfSpeechClick","onDefinitionClick","useState","entry","setEntry","useEffect","controller","AbortController","fetch","signal","then","response","json","result","catch","reason","console","error","abort","undefined","meanings","map","meaning","i","onClick","partOfSpeech","definitions","definition","j","dictionarySlice","createSlice","name","initialState","reducers","create","reducer","state","action","concat","payload","prepare","id","Date","now","update","findIndex","p","delete","filter","answer","entity","isCorrect","record","find","answersCount","correctAnswersCount","RecordPage","useParams","editedEntry","useSelector","s","parseInt","translation","history","useHistory","navigateRoot","push","dispatch","useDispatch","type","danger","actions","placeholder","value","onChange","e","target","TextArea","values","RecordRouter","path","useRouteMatch","component","to","shuffle","array","sort","Math","random","computeAnswersScore","ListPage","columns","title","dataIndex","ellipsis","showTitle","render","_","PlusOutlined","EditOutlined","onConfirm","DeleteOutlined","items","comparer","sortImmutable","a","b","dataSource","size","rowKey","ListRouter","Button","theme","children","className","rest","Card","CardBody","OverflowableCardBody","PracticeSession","records","filteredRecords","stack","groupWith","list","reduce","prev","curr","actualRecord","pop","progress","setProgress","isAnswerRevealed","setIsAnswerRevealed","handleAnswerButtonClick","Layout","div","PracticePage","PracticeRouter","exact","StyledApp","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","VOCABULARY_KEY","localStorage","getItem","store","configureStore","preloadedState","JSON","parse","subscribe","setItem","stringify","getState","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc9e5738.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { ApiResult, Word } from \"types\";\n\nconst StyledUl = styled.ul`\n  color: white;\n`;\n\nexport interface DefinitionsListProps {\n  word: string;\n  onPartOfSpeechClick?: (partOfSpeech: string) => void;\n  onDefinitionClick?: (values: {\n    partOfSpeech: string;\n    definition: string;\n  }) => void;\n}\n\nexport function DefinitionsList(props: DefinitionsListProps) {\n  const { word, onPartOfSpeechClick, onDefinitionClick } = props;\n  const [entry, setEntry] = useState<Word | undefined>();\n\n  useEffect(() => {\n    if (word === \"\") {\n      setEntry(undefined);\n      return;\n    }\n    const controller = new AbortController();\n    fetch(`https://api.dictionaryapi.dev/api/v2/entries/en_US/${word}`, {\n      signal: controller.signal,\n    })\n      .then((response) => response.json())\n      .then((result: ApiResult) => {\n        setEntry(result[0]);\n      })\n      .catch((reason) => console.error(reason));\n\n    return () => controller.abort();\n  }, [word]);\n\n  return (\n    <StyledUl>\n      {entry?.meanings.map((meaning, i) => (\n        <li key={i}>\n          <div\n            onClick={() =>\n              onPartOfSpeechClick && onPartOfSpeechClick(meaning.partOfSpeech)\n            }\n          >\n            {meaning.partOfSpeech}\n          </div>\n          <ul>\n            {meaning.definitions.map((definition, j) => (\n              <li\n                key={j}\n                onClick={() =>\n                  onDefinitionClick &&\n                  onDefinitionClick({\n                    partOfSpeech: meaning.partOfSpeech,\n                    definition: definition.definition,\n                  })\n                }\n              >\n                {definition.definition}\n              </li>\n            ))}\n          </ul>\n        </li>\n      ))}\n    </StyledUl>\n  );\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { DictionaryEntry } from \"./types/DictionaryEntry\";\r\nimport { Answer } from \"./utils\";\r\n\r\nexport type AppState = DictionaryEntry[];\r\n\r\nconst initialState: AppState = [];\r\n\r\nexport const dictionarySlice = createSlice({\r\n  name: \"dictionary\",\r\n  initialState,\r\n  reducers: {\r\n    create: {\r\n      reducer: (state, action: PayloadAction<DictionaryEntry>) =>\r\n        state.concat(action.payload),\r\n      prepare: (entry: DictionaryEntry) => {\r\n        return {\r\n          payload: {\r\n            id: Date.now(),\r\n            ...entry,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    update: (state, action: PayloadAction<DictionaryEntry>) => {\r\n      const i = state.findIndex((p) => p.id === action.payload.id);\r\n      if (i > -1) state[i] = action.payload;\r\n      return state;\r\n    },\r\n    delete: (state, action: PayloadAction<DictionaryEntry>) =>\r\n      state.filter((p) => p.id !== action.payload.id),\r\n    answer: (\r\n      state,\r\n      { payload: { entity, isCorrect } }: PayloadAction<Answer<DictionaryEntry>>\r\n    ) => {\r\n      const record = state.find((p) => p.id === entity.id);\r\n      if (record) {\r\n        record.answersCount++;\r\n        if (isCorrect) record.correctAnswersCount++;\r\n      }\r\n    },\r\n  },\r\n});\r\n","import { Button, Input } from \"antd\";\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { DefinitionsList } from \"./DefinitionsList\";\nimport { AppState, dictionarySlice } from \"reducer\";\nimport { DictionaryEntry } from \"types/DictionaryEntry\";\n\nexport interface RecordPageProps {}\n\nexport function RecordPage(props: RecordPageProps) {\n  const { id } = useParams<{ id?: string }>();\n\n  const editedEntry = useSelector<AppState, DictionaryEntry | undefined>((s) =>\n    id ? s.find((p) => p.id === parseInt(id)) : undefined\n  );\n\n  const [entry, setEntry] = useState<DictionaryEntry>({\n    word: \"\",\n    partOfSpeech: \"\",\n    translation: \"\",\n    definition: \"\",\n    answersCount: 0,\n    correctAnswersCount: 0,\n    ...(editedEntry ?? {}),\n  });\n\n  const history = useHistory();\n\n  const navigateRoot = () => history.push(\"/\");\n\n  const dispatch = useDispatch();\n  const handleConfirm = () => {\n    dispatch(\n      id\n        ? dictionarySlice.actions.update(entry)\n        : dictionarySlice.actions.create(entry)\n    );\n    navigateRoot();\n  };\n\n  const handleCancel = () => navigateRoot();\n\n  return (\n    <>\n      <Button type=\"primary\" danger onClick={handleCancel}>\n        Cancel\n      </Button>\n      <Button type=\"primary\" onClick={handleConfirm}>\n        Confirm\n      </Button>\n      <Input\n        placeholder=\"Word\"\n        value={entry.word}\n        onChange={(e) => setEntry({ ...entry, word: e.target.value })}\n      />\n      <Input\n        placeholder=\"Pard ot speech\"\n        value={entry.partOfSpeech}\n        onChange={(e) => setEntry({ ...entry, partOfSpeech: e.target.value })}\n      />\n      <Input\n        placeholder=\"Translation\"\n        value={entry.translation}\n        onChange={(e) => setEntry({ ...entry, translation: e.target.value })}\n      />\n      <Input.TextArea\n        placeholder=\"Definition\"\n        value={entry.definition}\n        onChange={(e) => setEntry({ ...entry, definition: e.target.value })}\n      />\n      <DefinitionsList\n        word={entry.word}\n        onPartOfSpeechClick={(partOfSpeech) =>\n          setEntry((entry) => ({ ...entry, partOfSpeech }))\n        }\n        onDefinitionClick={(values) =>\n          setEntry((entry) => ({ ...entry, ...values }))\n        }\n      />\n    </>\n  );\n}\n","import { Redirect, Route, Switch, useRouteMatch } from \"react-router-dom\";\nimport { RecordPage } from \"./Page\";\n\nexport function RecordRouter() {\n  const { path } = useRouteMatch();\n\n  return (\n    <Switch>\n      <Route path={`${path}/:id?`} component={RecordPage} />\n      <Redirect to={`${path}`} />\n    </Switch>\n  );\n}\n","/**\r\n * Shuffle array and return new instance.\r\n */\r\nexport function shuffle<T>(array: T[]): T[] {\r\n  return [...array].sort(() => (Math.random() > 0.5 ? 1 : -1));\r\n}\r\n\r\nexport interface Answer<T> {\r\n  isCorrect: boolean;\r\n  entity: T;\r\n}\r\n\r\nexport function prepareAnswersSet<T>(tested: T, all: T[]): Answer<T>[] {\r\n  const allWithoutTested = all.filter((p) => p !== tested);\r\n  const shufledAllWithoutTested = shuffle(allWithoutTested);\r\n  const incorrects = shufledAllWithoutTested.splice(0, 3);\r\n  const set = [\r\n    { isCorrect: true, entity: tested },\r\n    ...incorrects.map((p) => ({ isCorrect: false, entity: p })),\r\n  ];\r\n  const shufledSet = shuffle(set);\r\n  return shufledSet;\r\n}\r\n\r\nexport function sortImmutable<T>(\r\n  items: T[],\r\n  comparer?: (a: T, b: T) => number\r\n): T[] {\r\n  return [...items].sort(comparer);\r\n}\r\n\r\nexport interface AnswersCountable {\r\n  answersCount: number;\r\n  correctAnswersCount: number;\r\n}\r\n\r\nexport function computeAnswersScore<T extends AnswersCountable>({\r\n  answersCount,\r\n  correctAnswersCount,\r\n}: T): number {\r\n  return answersCount + correctAnswersCount;\r\n}\r\n\r\nexport function answersComparer<T extends AnswersCountable>(a: T, b: T) {\r\n  const [scoreA, scoreB] = [a, b].map(computeAnswersScore);\r\n\r\n  return scoreB - scoreA;\r\n}\r\n\r\nexport interface Definable {\r\n  definition: string;\r\n}\r\n\r\nexport const hasDefinition = (definable: Definable) =>\r\n  definable.definition !== \"\";\r\n\r\nexport interface Translateable {\r\n  translation: string;\r\n}\r\n\r\nexport const hasTranslation = (translateable: Translateable) =>\r\n  translateable.translation !== \"\";\r\n","import { DeleteOutlined, EditOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport { Button, Popconfirm, Tooltip } from \"antd\";\nimport Table, { ColumnsType } from \"antd/lib/table\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { DictionaryEntry } from \"../../types/DictionaryEntry\";\nimport { AppState, dictionarySlice } from \"../../reducer\";\nimport { sortImmutable } from \"../../utils\";\n\nexport interface ListPageProps {}\n\nexport function ListPage(props: ListPageProps) {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const columns: ColumnsType<DictionaryEntry> = [\n    {\n      title: \"Word\",\n      dataIndex: \"word\",\n      ellipsis: { showTitle: true },\n    },\n    {\n      title: (\n        <Tooltip title=\"Total answers / Correct answers\">\n          Total / Correct\n        </Tooltip>\n      ),\n      render: (_, record) => (\n        <>\n          {record.answersCount} / {record.correctAnswersCount}\n        </>\n      ),\n    },\n    {\n      title: () => (\n        <Button type=\"primary\" onClick={() => history.push(\"/record\")}>\n          <PlusOutlined />\n        </Button>\n      ),\n      render: (_, record) => (\n        <>\n          <Button onClick={() => history.push(`/record/${record.id}`)}>\n            <EditOutlined />\n          </Button>\n          <Popconfirm\n            title=\"Are you sure to delete this?\"\n            onConfirm={() => {\n              dispatch(dictionarySlice.actions.delete(record));\n            }}\n          >\n            <Button>\n              <DeleteOutlined />\n            </Button>\n          </Popconfirm>\n        </>\n      ),\n    },\n  ];\n  const items = useSelector<AppState, DictionaryEntry[]>((s) =>\n    sortImmutable(s, (a, b) => (b.id ?? 0) - (a.id ?? 0))\n  );\n  return (\n    <>\n      <Button type=\"primary\" onClick={() => history.push(\"/practice\")}>\n        Practice\n      </Button>\n      <Table columns={columns} dataSource={items} size=\"middle\" rowKey=\"id\" />\n    </>\n  );\n}\n","import { ListRouter } from \"./Router\";\n\nexport default ListRouter;\n","import { Route, Switch, useRouteMatch } from \"react-router-dom\";\nimport { ListPage } from \"./Page\";\n\nexport function ListRouter() {\n  const { path } = useRouteMatch();\n\n  return (\n    <Switch>\n      <Route path={`${path}`} component={ListPage} />\n    </Switch>\n  );\n}\n","import { ButtonHTMLAttributes, DetailedHTMLProps } from \"react\";\n\nexport type Theme =\n  | \"primary\"\n  | \"secondary\"\n  | \"success\"\n  | \"warning\"\n  | \"danger\"\n  | \"info\";\n\ntype NativeButtonProps = DetailedHTMLProps<\n  ButtonHTMLAttributes<HTMLButtonElement>,\n  HTMLButtonElement\n>;\n\nexport interface ButtonProps extends NativeButtonProps {\n  /**\n   * @default \"primary\"\n   */\n  theme?: Theme;\n}\n\nexport function Button({ theme, children, className, ...rest }: ButtonProps) {\n  return (\n    <button\n      {...rest}\n      className={`btn btn-${theme ?? \"primary\"} ${className ?? \"\"}`}\n    >\n      {children}\n    </button>\n  );\n}\n","import { FC } from \"react\";\r\n\r\ntype NativeDivProps = React.DetailedHTMLProps<\r\n  React.HTMLAttributes<HTMLDivElement>,\r\n  HTMLDivElement\r\n>;\r\n\r\nexport type CardProps = NativeDivProps;\r\n\r\nexport const Card: FC<CardProps> = ({ children, className, ...rest }) => {\r\n  return (\r\n    <div className={\"card \" + (className ?? \"\")} {...rest}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","import { FC } from \"react\";\r\n\r\ntype NativeDivProps = React.DetailedHTMLProps<\r\n  React.HTMLAttributes<HTMLDivElement>,\r\n  HTMLDivElement\r\n>;\r\n\r\nexport type CardBodyProps = NativeDivProps;\r\n\r\nexport const CardBody: FC<CardBodyProps> = ({\r\n  children,\r\n  className,\r\n  ...rest\r\n}) => {\r\n  return (\r\n    <div className={\"card-body \" + (className ?? \"\")} {...rest}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","import { FC, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { groupWith } from \"ramda\";\nimport { Button } from \"components/Button\";\nimport { Card } from \"components/Card\";\nimport { CardBody } from \"components/CardBody\";\nimport { DictionaryEntry } from \"types/DictionaryEntry\";\nimport { AppState, dictionarySlice } from \"reducer\";\nimport {\n  computeAnswersScore,\n  hasDefinition,\n  hasTranslation,\n  shuffle,\n} from \"utils\";\n\nconst OverflowableCardBody = styled(CardBody)`\n  overflow: auto;\n`;\n\ninterface PracticeSessionProps {}\n\ninterface Progress {\n  stack: DictionaryEntry[];\n  actualRecord?: DictionaryEntry;\n}\n\nexport const PracticeSession: FC<PracticeSessionProps> = () => {\n  const records = useSelector<AppState, DictionaryEntry[]>((s) => s);\n\n  const [progress, setProgress] = useState<Progress>(() => {\n    const filteredRecords = records.filter(\n      (p) => hasTranslation(p) || hasDefinition(p)\n    );\n\n    const stack = groupWith(\n      (a, b) => computeAnswersScore(a) === computeAnswersScore(b),\n      filteredRecords\n    )\n      .map((list) => shuffle(list))\n      .reduce((prev, curr) => [...prev, ...curr], []);\n\n    const actualRecord = stack.pop();\n\n    return { stack, actualRecord };\n  });\n\n  const [isAnswerRevealed, setIsAnswerRevealed] = useState(false);\n\n  const handleRevealAnswer = () => setIsAnswerRevealed(true);\n\n  const dispatch = useDispatch();\n  const handleAnswerButtonClick = (isCorrect: boolean) => {\n    if (progress?.actualRecord)\n      dispatch(\n        dictionarySlice.actions.answer({\n          isCorrect,\n          entity: progress.actualRecord,\n        })\n      );\n    setIsAnswerRevealed(false);\n    setProgress((state) => {\n      const stack = [...(state?.stack ?? [])];\n\n      const actualRecord = stack.pop();\n\n      return { stack, actualRecord };\n    });\n  };\n\n  if (!progress.actualRecord) return null;\n  return (\n    <>\n      <Card>\n        <CardBody className=\"text-center\">\n          <div>{progress.actualRecord.translation}</div>\n          <div>\n            (<i>{progress.actualRecord.partOfSpeech}</i>)\n          </div>\n        </CardBody>\n      </Card>\n      <Card>\n        <OverflowableCardBody className=\"text-center\">\n          {progress.actualRecord.definition}\n        </OverflowableCardBody>\n      </Card>\n      <Card>\n        <CardBody className=\"text-center\">\n          {isAnswerRevealed ? progress.actualRecord.word : \"?\"}\n        </CardBody>\n      </Card>\n      {!isAnswerRevealed ? (\n        <Button onClick={handleRevealAnswer}>Reveal answer</Button>\n      ) : (\n        <>\n          <Button theme=\"success\" onClick={() => handleAnswerButtonClick(true)}>\n            I was correct\n          </Button>\n          <Button theme=\"danger\" onClick={() => handleAnswerButtonClick(false)}>\n            I was incorrect\n          </Button>\n        </>\n      )}\n    </>\n  );\n};\n","import { useHistory } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { Button } from \"components/Button\";\nimport { PracticeSession } from \"./PracticeSession\";\n\nconst Layout = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n`;\n\nexport interface PracticePageProps {}\n\nexport function PracticePage(props: PracticePageProps) {\n  const history = useHistory();\n  return (\n    <Layout>\n      <PracticeSession />\n      <Button onClick={() => history.push(\"/\")}>End practice</Button>\n    </Layout>\n  );\n}\n","import { Redirect, Route, Switch, useRouteMatch } from \"react-router-dom\";\nimport { PracticePage } from \"./Page\";\n\nexport function PracticeRouter() {\n  const { path } = useRouteMatch();\n\n  return (\n    <Switch>\n      <Route path={`${path}`} exact component={PracticePage} />\n      <Redirect to={path} />\n    </Switch>\n  );\n}\n","import { HashRouter, Redirect, Route, Switch } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { RecordRouter } from \"routes/record/Router\";\nimport ListRouter from \"./routes/list\";\nimport { PracticeRouter } from \"routes/practice/Router\";\n\nconst StyledApp = styled.div`\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  font-size: calc(10px + 2vmin);\n`;\n\nexport function App() {\n  return (\n    <StyledApp className=\"bg-dark\">\n      <HashRouter>\n        <Switch>\n          <Route path=\"/record\" component={RecordRouter} />\n          <Route path=\"/practice\" component={PracticeRouter} />\n          <Route path=\"/list\" component={ListRouter} />\n          <Redirect to=\"/list\" />\n        </Switch>\n      </HashRouter>\n    </StyledApp>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"antd/dist/antd.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { Provider } from \"react-redux\";\nimport { dictionarySlice } from \"./reducer\";\n\nconst VOCABULARY_KEY = \"vocabulary\";\n\nconst json = localStorage.getItem(VOCABULARY_KEY);\n\nconst store = configureStore({\n  reducer: dictionarySlice.reducer,\n  preloadedState: json ? JSON.parse(json) : undefined,\n});\n\nstore.subscribe(() => {\n  localStorage.setItem(VOCABULARY_KEY, JSON.stringify(store.getState()));\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}