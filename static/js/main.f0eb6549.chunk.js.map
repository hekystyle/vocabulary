{"version":3,"sources":["DefinitionsList/index.tsx","reducer.ts","RecordPage/index.tsx","utils.ts","ListPage/index.tsx","components/Button.tsx","PracticePage/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DefinitionsList","props","word","onPartOfSpeechClick","onDefinitionClick","useState","entry","setEntry","useEffect","controller","AbortController","fetch","signal","then","response","json","result","catch","reason","console","error","abort","undefined","meanings","map","meaning","i","onClick","partOfSpeech","definitions","definition","j","dictionarySlice","createSlice","name","initialState","reducers","create","reducer","state","action","concat","payload","prepare","id","Date","now","update","findIndex","p","delete","filter","answer","entity","isCorrect","record","find","answersCount","correctAnswersCount","RecordPage","useParams","editedEntry","useSelector","s","parseInt","translation","history","useHistory","navigateRoot","push","dispatch","useDispatch","type","danger","actions","placeholder","value","onChange","e","target","TextArea","values","shuffle","array","sort","Math","random","prepareAnswersSet","tested","all","incorrects","splice","sortImmutable","items","comparer","computeAnswersScore","answersComparer","a","b","scoreA","ListPage","columns","title","dataIndex","ellipsis","showTitle","render","_","PlusOutlined","EditOutlined","onConfirm","DeleteOutlined","dataSource","size","rowKey","Button","theme","children","className","rest","Knowledge","ButtonsGrid","styled","div","FILTERS","definable","translateable","SELECTORS","d","t","PracticePage","knowledge","setKnowledge","onSelect","KnowledgeSelection","PracticeSession","records","filteredRecords","useMemo","stack","actualRecord","pop","actualAnswersSet","progress","setProgress","actualAnswer","setAnswer","style","textAlign","disabled","Boolean","handleAnswerClick","StyledApp","App","path","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","VOCABULARY_KEY","localStorage","getItem","store","configureStore","preloadedState","JSON","parse","subscribe","setItem","stringify","getState","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f0eb6549.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { ApiResult, Word } from \"../types\";\n\nexport interface DefinitionsListProps {\n  word: string;\n  onPartOfSpeechClick?: (partOfSpeech: string) => void;\n  onDefinitionClick?: (values: {\n    partOfSpeech: string;\n    definition: string;\n  }) => void;\n}\n\nexport function DefinitionsList(props: DefinitionsListProps) {\n  const { word, onPartOfSpeechClick, onDefinitionClick } = props;\n  const [entry, setEntry] = useState<Word | undefined>();\n\n  useEffect(() => {\n    if (word === \"\") {\n      setEntry(undefined);\n      return;\n    }\n    const controller = new AbortController();\n    fetch(`https://api.dictionaryapi.dev/api/v2/entries/en_US/${word}`, {\n      signal: controller.signal,\n    })\n      .then((response) => response.json())\n      .then((result: ApiResult) => {\n        setEntry(result[0]);\n      })\n      .catch((reason) => console.error(reason));\n\n    return () => controller.abort();\n  }, [word]);\n\n  return (\n    <ul>\n      {entry?.meanings.map((meaning, i) => (\n        <li key={i}>\n          <div\n            onClick={() =>\n              onPartOfSpeechClick && onPartOfSpeechClick(meaning.partOfSpeech)\n            }\n          >\n            {meaning.partOfSpeech}\n          </div>\n          <ul>\n            {meaning.definitions.map((definition, j) => (\n              <li\n                key={j}\n                onClick={() =>\n                  onDefinitionClick &&\n                  onDefinitionClick({\n                    partOfSpeech: meaning.partOfSpeech,\n                    definition: definition.definition,\n                  })\n                }\n              >\n                {definition.definition}\n              </li>\n            ))}\n          </ul>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { DictionaryEntry } from \"./RecordPage\";\r\nimport { Answer } from \"./utils\";\r\n\r\nexport type AppState = DictionaryEntry[];\r\n\r\nconst initialState: AppState = [];\r\n\r\nexport const dictionarySlice = createSlice({\r\n  name: \"dictionary\",\r\n  initialState,\r\n  reducers: {\r\n    create: {\r\n      reducer: (state, action: PayloadAction<DictionaryEntry>) =>\r\n        state.concat(action.payload),\r\n      prepare: (entry: DictionaryEntry) => {\r\n        return {\r\n          payload: {\r\n            id: Date.now(),\r\n            ...entry,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    update: (state, action: PayloadAction<DictionaryEntry>) => {\r\n      const i = state.findIndex((p) => p.id === action.payload.id);\r\n      if (i > -1) state[i] = action.payload;\r\n      return state;\r\n    },\r\n    delete: (state, action: PayloadAction<DictionaryEntry>) =>\r\n      state.filter((p) => p.id !== action.payload.id),\r\n    answer: (\r\n      state,\r\n      { payload: { entity, isCorrect } }: PayloadAction<Answer<DictionaryEntry>>\r\n    ) => {\r\n      const record = state.find((p) => p.id === entity.id);\r\n      if (record) {\r\n        record.answersCount++;\r\n        if (isCorrect) record.correctAnswersCount++;\r\n      }\r\n    },\r\n  },\r\n});\r\n","import { Button, Input } from \"antd\";\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { DefinitionsList } from \"../DefinitionsList\";\nimport { AppState, dictionarySlice } from \"../reducer\";\nimport { AnswersCountable, Definable } from \"../utils\";\n\nexport interface DictionaryEntry extends AnswersCountable, Definable {\n  id?: number;\n  word: string;\n  partOfSpeech: string;\n  translation: string;\n}\n\nexport interface RecordPageProps {}\n\nexport function RecordPage(props: RecordPageProps) {\n  const { id } = useParams<{ id?: string }>();\n\n  const editedEntry = useSelector<AppState, DictionaryEntry | undefined>((s) =>\n    id ? s.find((p) => p.id === parseInt(id)) : undefined\n  );\n\n  const [entry, setEntry] = useState<DictionaryEntry>({\n    word: \"\",\n    partOfSpeech: \"\",\n    translation: \"\",\n    definition: \"\",\n    answersCount: 0,\n    correctAnswersCount: 0,\n    ...(editedEntry ?? {}),\n  });\n\n  const history = useHistory();\n\n  const navigateRoot = () => history.push(\"/\");\n\n  const dispatch = useDispatch();\n  const handleConfirm = () => {\n    dispatch(\n      id\n        ? dictionarySlice.actions.update(entry)\n        : dictionarySlice.actions.create(entry)\n    );\n    navigateRoot();\n  };\n\n  const handleCancel = () => navigateRoot();\n\n  return (\n    <>\n      <Button type=\"primary\" danger onClick={handleCancel}>\n        Cancel\n      </Button>\n      <Button type=\"primary\" onClick={handleConfirm}>\n        Confirm\n      </Button>\n      <Input\n        placeholder=\"Word\"\n        value={entry.word}\n        onChange={(e) => setEntry({ ...entry, word: e.target.value })}\n      />\n      <Input\n        placeholder=\"Pard ot speech\"\n        value={entry.partOfSpeech}\n        onChange={(e) => setEntry({ ...entry, partOfSpeech: e.target.value })}\n      />\n      <Input\n        placeholder=\"Translation\"\n        value={entry.translation}\n        onChange={(e) => setEntry({ ...entry, translation: e.target.value })}\n      />\n      <Input.TextArea\n        placeholder=\"Definition\"\n        value={entry.definition}\n        onChange={(e) => setEntry({ ...entry, definition: e.target.value })}\n      />\n      <DefinitionsList\n        word={entry.word}\n        onPartOfSpeechClick={(partOfSpeech) =>\n          setEntry((entry) => ({ ...entry, partOfSpeech }))\n        }\n        onDefinitionClick={(values) =>\n          setEntry((entry) => ({ ...entry, ...values }))\n        }\n      />\n    </>\n  );\n}\n","/**\r\n * Shuffle array and return new instance.\r\n */\r\nexport function shuffle<T>(array: T[]): T[] {\r\n  return [...array].sort(() => (Math.random() > 0.5 ? 1 : -1));\r\n}\r\n\r\nexport interface Answer<T> {\r\n  isCorrect: boolean;\r\n  entity: T;\r\n}\r\n\r\nexport function prepareAnswersSet<T>(tested: T, all: T[]): Answer<T>[] {\r\n  const allWithoutTested = all.filter((p) => p !== tested);\r\n  const shufledAllWithoutTested = shuffle(allWithoutTested);\r\n  const incorrects = shufledAllWithoutTested.splice(0, 3);\r\n  const set = [\r\n    { isCorrect: true, entity: tested },\r\n    ...incorrects.map((p) => ({ isCorrect: false, entity: p })),\r\n  ];\r\n  const shufledSet = shuffle(set);\r\n  return shufledSet;\r\n}\r\n\r\nexport function sortImmutable<T>(\r\n  items: T[],\r\n  comparer?: (a: T, b: T) => number\r\n): T[] {\r\n  return [...items].sort(comparer);\r\n}\r\n\r\nexport interface AnswersCountable {\r\n  answersCount: number;\r\n  correctAnswersCount: number;\r\n}\r\n\r\nexport function computeAnswersScore<T extends AnswersCountable>({\r\n  answersCount,\r\n  correctAnswersCount,\r\n}: T): number {\r\n  return answersCount + correctAnswersCount;\r\n}\r\n\r\nexport function answersComparer<T extends AnswersCountable>(a: T, b: T) {\r\n  const [scoreA, scoreB] = [a, b].map(computeAnswersScore);\r\n\r\n  return scoreB - scoreA;\r\n}\r\n\r\nexport interface Definable {\r\n  definition: string;\r\n}\r\n\r\nexport const hasDefinition = (definable: Definable) =>\r\n  definable.definition !== \"\";\r\n\r\nexport interface Translateable {\r\n  translation: string;\r\n}\r\n\r\nexport const hasTranslation = (translateable: Translateable) =>\r\n  translateable.translation !== \"\";\r\n","import { DeleteOutlined, EditOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport { Button, Popconfirm, Tooltip } from \"antd\";\nimport Table, { ColumnsType } from \"antd/lib/table\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { DictionaryEntry } from \"../RecordPage\";\nimport { AppState, dictionarySlice } from \"../reducer\";\nimport { sortImmutable } from \"../utils\";\n\nexport interface ListPageProps {}\n\nexport function ListPage(props: ListPageProps) {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const columns: ColumnsType<DictionaryEntry> = [\n    {\n      title: \"Word\",\n      dataIndex: \"word\",\n      ellipsis: { showTitle: true },\n    },\n    {\n      title: (\n        <Tooltip title=\"Total answers / Correct answers\">\n          Total / Correct\n        </Tooltip>\n      ),\n      render: (_, record) => (\n        <>\n          {record.answersCount} / {record.correctAnswersCount}\n        </>\n      ),\n    },\n    {\n      title: () => (\n        <Button type=\"primary\" onClick={() => history.push(\"/record\")}>\n          <PlusOutlined />\n        </Button>\n      ),\n      render: (_, record) => (\n        <>\n          <Button onClick={() => history.push(`/record/${record.id}`)}>\n            <EditOutlined />\n          </Button>\n          <Popconfirm\n            title=\"Are you sure to delete this?\"\n            onConfirm={() => {\n              dispatch(dictionarySlice.actions.delete(record));\n            }}\n          >\n            <Button>\n              <DeleteOutlined />\n            </Button>\n          </Popconfirm>\n        </>\n      ),\n    },\n  ];\n  const items = useSelector<AppState, DictionaryEntry[]>((s) =>\n    sortImmutable(s, (a, b) => (b.id ?? 0) - (a.id ?? 0))\n  );\n  return (\n    <>\n      <Button type=\"primary\" onClick={() => history.push(\"/practice\")}>\n        Practice\n      </Button>\n      <Table columns={columns} dataSource={items} size=\"middle\" rowKey=\"id\" />\n    </>\n  );\n}\n","import { ButtonHTMLAttributes, DetailedHTMLProps } from \"react\";\n\nexport type Theme =\n  | \"primary\"\n  | \"secondary\"\n  | \"success\"\n  | \"warning\"\n  | \"danger\"\n  | \"info\";\n\ntype NativeButtonProps = DetailedHTMLProps<\n  ButtonHTMLAttributes<HTMLButtonElement>,\n  HTMLButtonElement\n>;\n\nexport interface ButtonProps extends NativeButtonProps {\n  /**\n   * @default \"primary\"\n   */\n  theme?: Theme;\n}\n\nexport function Button({ theme, children, className, ...rest }: ButtonProps) {\n  return (\n    <button\n      {...rest}\n      className={`btn btn-${theme ?? \"primary\"} ${className ?? \"\"}`}\n    >\n      {children}\n    </button>\n  );\n}\n","import { FC, useMemo, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { Button } from \"../components/Button\";\nimport { DictionaryEntry } from \"../RecordPage\";\nimport { AppState, dictionarySlice } from \"../reducer\";\nimport {\n  Answer,\n  answersComparer,\n  Definable,\n  hasDefinition,\n  hasTranslation,\n  prepareAnswersSet,\n  sortImmutable,\n  Translateable,\n} from \"../utils\";\n\nconst ButtonsGrid = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n`;\n\nexport enum Knowledge {\n  translation,\n  definition,\n}\n\nconst FILTERS = {\n  [Knowledge.definition]: hasDefinition,\n  [Knowledge.translation]: hasTranslation,\n};\n\nconst SELECTORS = {\n  [Knowledge.definition]: (d: Definable) => d.definition,\n  [Knowledge.translation]: (t: Translateable) => t.translation,\n};\n\nexport interface PracticePageProps {}\n\nexport function PracticePage(props: PracticePageProps) {\n  const [knowledge, setKnowledge] = useState<Knowledge>();\n\n  const history = useHistory();\n  return (\n    <>\n      {knowledge === undefined ? (\n        <KnowledgeSelection onSelect={setKnowledge} />\n      ) : (\n        <PracticeSession knowledge={knowledge} {...props} />\n      )}\n      <div>\n        <hr />\n      </div>\n      <Button onClick={() => history.push(\"/\")}>End practice</Button>\n    </>\n  );\n}\n\ninterface KnowledgeSelectionProps {\n  onSelect?: (k: Knowledge) => void;\n}\n\nconst KnowledgeSelection: FC<KnowledgeSelectionProps> = ({ onSelect }) => (\n  <ButtonsGrid>\n    {[Knowledge.definition, Knowledge.translation].map((knowledge) => (\n      <Button key={knowledge} onClick={() => onSelect && onSelect(knowledge)}>\n        {Knowledge[knowledge]}\n      </Button>\n    ))}\n  </ButtonsGrid>\n);\n\ninterface PracticeSessionProps extends PracticePageProps {\n  knowledge: Knowledge;\n}\n\ninterface Progress {\n  stack: DictionaryEntry[];\n  actualRecord?: DictionaryEntry;\n  actualAnswersSet: Answer<DictionaryEntry>[];\n}\n\nconst PracticeSession: FC<PracticeSessionProps> = ({ knowledge }) => {\n  const records = useSelector<AppState, DictionaryEntry[]>((s) => s);\n\n  const filteredRecords = useMemo(\n    () => records.filter(FILTERS[knowledge]),\n    [records, knowledge]\n  );\n\n  const [progress, setProgress] = useState<Progress>(() => {\n    const stack = sortImmutable(filteredRecords, answersComparer);\n\n    const actualRecord = stack.pop();\n\n    const actualAnswersSet = actualRecord\n      ? prepareAnswersSet(actualRecord, filteredRecords)\n      : [];\n\n    return { stack, actualRecord, actualAnswersSet };\n  });\n\n  const [actualAnswer, setAnswer] = useState<Answer<DictionaryEntry>>();\n\n  const dispatch = useDispatch();\n  const handleAnswerClick = (answer: Answer<DictionaryEntry>) => {\n    setAnswer(answer);\n    if (progress?.actualRecord)\n      dispatch(\n        dictionarySlice.actions.answer({\n          isCorrect: answer.isCorrect,\n          entity: progress.actualRecord,\n        })\n      );\n  };\n\n  const handleNextClick = () => {\n    setProgress((state) => {\n      const stack = [...(state?.stack ?? [])];\n\n      const actualRecord = stack.pop();\n\n      const actualAnswersSet = actualRecord\n        ? prepareAnswersSet(actualRecord, filteredRecords ?? [])\n        : [];\n\n      return { stack, actualRecord, actualAnswersSet };\n    });\n    setAnswer(undefined);\n  };\n\n  return (\n    <>\n      {progress?.actualRecord && (\n        <div style={{ textAlign: \"center\" }}>\n          {progress.actualRecord.word} (\n          <i>{progress.actualRecord.partOfSpeech}</i>)\n        </div>\n      )}\n      <ButtonsGrid>\n        {progress?.actualAnswersSet.map((answer) => (\n          <Button\n            key={answer.entity.id}\n            disabled={Boolean(actualAnswer)}\n            onClick={() => handleAnswerClick(answer)}\n            theme={\n              answer.isCorrect && actualAnswer\n                ? \"success\"\n                : !answer.isCorrect && answer === actualAnswer\n                ? \"danger\"\n                : \"secondary\"\n            }\n          >\n            {SELECTORS[knowledge](answer.entity)}\n          </Button>\n        ))}\n      </ButtonsGrid>\n      {actualAnswer && (\n        <>\n          <div>\n            <hr />\n          </div>\n          <Button onClick={handleNextClick}>Next word</Button>\n        </>\n      )}\n    </>\n  );\n};\n","import { HashRouter, Redirect, Route, Switch } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { RecordPage } from \"./RecordPage\";\nimport { ListPage } from \"./ListPage\";\nimport { PracticePage } from \"./PracticePage\";\n\nconst StyledApp = styled.div`\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`;\n\nexport function App() {\n  return (\n    <StyledApp className=\"bg-dark\">\n      <HashRouter>\n        <Switch>\n          <Route path=\"/record/:id?\">\n            <RecordPage />\n          </Route>\n          <Route path=\"/practice\">\n            <PracticePage />\n          </Route>\n          <Route path=\"/list\">\n            <ListPage />\n          </Route>\n          <Redirect to=\"/list\" />\n        </Switch>\n      </HashRouter>\n    </StyledApp>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"antd/dist/antd.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { Provider } from \"react-redux\";\nimport { dictionarySlice } from \"./reducer\";\n\nconst VOCABULARY_KEY = \"vocabulary\";\n\nconst json = localStorage.getItem(VOCABULARY_KEY);\n\nconst store = configureStore({\n  reducer: dictionarySlice.reducer,\n  preloadedState: json ? JSON.parse(json) : undefined,\n});\n\nstore.subscribe(() => {\n  localStorage.setItem(VOCABULARY_KEY, JSON.stringify(store.getState()));\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}