{"version":3,"file":"static/js/314.db8a3468.chunk.js","mappings":"0NAqEA,UAhCqB,WACnB,IAAQA,GAAOC,EAAAA,EAAAA,KAAPD,GACR,GAAkCE,EAAAA,EAAAA,cAAW,iBAC3C,wGACQF,EAAGG,SAAS,KAAD,kBACXH,EAAGI,OAAO,KAAD,YAhCjB,CACE,CACEC,KAAM,MACNC,WAAY,sFACZC,aAAc,OACdC,YAAa,QAEf,CACEH,KAAM,WACNC,WACE,8IACFC,aAAc,OACdC,YAAa,yBAGjBC,KAAU,SAAAC,GACV,IAAMC,EAAQC,EAAAA,GAAAA,SAAAA,OAAsB,CAAEC,IAAK,EAAGC,IAAK,KAC7CC,EAAUH,EAAAA,GAAAA,SAAAA,OAAsB,CAAEC,IAAK,EAAGC,IAAKH,IACrD,OAAO,kBACFD,GAAI,IACPM,aAAcL,EACdM,oBAAqBF,EACrBG,KAAMC,MAAMC,KAAK,CAAEC,OAAQT,EAAAA,GAAAA,SAAAA,OAAsB,CAAEC,IAAK,EAAGC,IAAK,MAAQ,kBAAMF,EAAAA,GAAAA,OAAAA,MAAmB,KAErG,KASqC,yDAAlB,OAAJF,EAAI,kBACPV,EAAGsB,MAAMC,IAAIb,GAAM,KAAD,kMAG5B,CACEc,QAAS,SAAAC,GAAC,OAAIC,QAAQC,MAAMF,EAAE,IAT1BE,EAAK,EAALA,MAAOC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAavB,OAAQA,GACN,IAAK,OACH,OACE,SAAC,IAAM,CAACC,OAAK,EAACC,QAAM,EAACC,KAAK,UAAUC,QAAS,kBAAML,GAAQ,EAAC,kBAIhE,IAAK,UACH,OAAO,sCACT,IAAK,QACH,OAAO,uBAAIM,KAAKC,UAAUR,KAC5B,QACE,OAAO,uBAAIE,IAEjB,C","sources":["routes/seed/Page.tsx"],"sourcesContent":["import { faker } from '@faker-js/faker';\nimport { Button } from 'antd';\nimport { useServices } from 'containers/Services';\nimport { FC } from 'react';\nimport { useMutation } from 'react-query';\nimport { StrictOmit } from 'types/StrictOmit';\nimport { Term } from 'types/Term';\n\nfunction getFakeTerms() {\n  return (\n    [\n      {\n        word: 'car',\n        definition: 'a road vehicle with four wheels; usually propelled by an internal combustion engine',\n        partOfSpeech: 'noun',\n        translation: 'auto',\n      },\n      {\n        word: 'computer',\n        definition:\n          'an electronic device for storing and processing data, typically in binary form, according to instructions given to it in a variable program',\n        partOfSpeech: 'noun',\n        translation: 'počítač',\n      },\n    ] satisfies Array<StrictOmit<Term, 'answersCount' | 'correctAnswersCount' | 'tags'>>\n  ).map<Term>(term => {\n    const total = faker.datatype.number({ min: 1, max: 10 });\n    const correct = faker.datatype.number({ min: 0, max: total });\n    return {\n      ...term,\n      answersCount: total,\n      correctAnswersCount: correct,\n      tags: Array.from({ length: faker.datatype.number({ min: 0, max: 5 }) }, () => faker.random.word()),\n    };\n  });\n}\n\nconst SeedPage: FC = () => {\n  const { db } = useServices();\n  const { error, mutate, status } = useMutation(\n    async () => {\n      await db.delete();\n      await db.open();\n      for (const term of getFakeTerms()) {\n        await db.terms.add(term);\n      }\n    },\n    {\n      onError: e => console.error(e),\n    },\n  );\n\n  switch (status) {\n    case 'idle':\n      return (\n        <Button block danger type=\"primary\" onClick={() => mutate()}>\n          Seed\n        </Button>\n      );\n    case 'loading':\n      return <p>seeding...</p>;\n    case 'error':\n      return <p>{JSON.stringify(error)}</p>;\n    default:\n      return <p>{status}</p>;\n  }\n};\n\n// NOTE: default export is required for lazy loading\nexport default SeedPage;\n"],"names":["db","useServices","useMutation","delete","open","word","definition","partOfSpeech","translation","map","term","total","faker","min","max","correct","answersCount","correctAnswersCount","tags","Array","from","length","terms","add","onError","e","console","error","mutate","status","block","danger","type","onClick","JSON","stringify"],"sourceRoot":""}