{"version":3,"sources":["services/dictionaryApi.ts","routes/record/DefinitionsList.tsx","routes/list/adapters.ts","routes/list/reducer.ts","hooks/useTypedSelector.ts","routes/record/selectors.ts","routes/record/Page.tsx","routes/record/Router.tsx","components/Table.tsx","routes/list/Page.tsx","routes/list/index.ts","routes/practice/reducer.ts","routes/list/Router.tsx","utils/computeAnswersRelativeScore.ts","utils/computeAnswersAbsoluteScore.ts","utils/hasTranslation.ts","utils/hasDefinition.ts","utils/shuffle.ts","routes/practice/PracticeSession.tsx","routes/practice/useSpeech.ts","routes/practice/Configuration.tsx","routes/practice/Page.tsx","routes/practice/Router.tsx","NavBar.tsx","App.tsx","reportWebVitals.ts","reducer.ts","persistence.ts","index.tsx"],"names":["DictionaryApi","controller","AbortController","this","abort","word","fetch","headers","Accept","signal","response","json","StyledUl","styled","ul","DefinitionsList","props","onPartOfSpeechClick","onDefinitionClick","useState","entry","setEntry","useEffect","api","then","result","catch","reason","console","error","undefined","meanings","map","meaning","i","onClick","partOfSpeech","definitions","definition","j","termAdapter","createEntityAdapter","selectId","term","id","sortComparer","a","b","getSelectors","s","dictionary","selectAll","selectById","initialState","selectEntities","selectIds","selectTotal","getInitialState","dictionarySlice","createSlice","name","reducers","addOne","reducer","prepare","payload","Date","now","updateOne","removeOne","answer","state","entity","isCorrect","record","entities","answersCount","correctAnswersCount","tableSlice","page","update","recordsReducer","combineReducers","table","useTypedSelector","useSelector","selectTermOptions","createSelector","terms","value","selectUniqPartOfSpeechOptions","Array","from","Set","RecordPage","useParams","editedEntry","parseInt","translation","history","useHistory","navigateRoot","push","dispatch","useDispatch","handleChange","values","termOptions","uniqPartOfSpeechOptions","allowClear","placeholder","options","filterOption","inputValue","option","startsWith","onChange","onSelect","style","width","e","target","TextArea","type","actions","changes","danger","RecordRouter","path","useRouteMatch","component","to","StyledTable","AntdTable","Table","ListPage","columns","title","dataIndex","ellipsis","showTitle","render","_","PlusOutlined","EditOutlined","onConfirm","DeleteOutlined","items","sort","records","dataSource","size","rowKey","pagination","defaultCurrent","ListRouter","ScoreAlgorithm","SCORE_ALGO_MAP","relative","Math","floor","absolute","config","isActive","stack","isRevealed","sessionSlice","start","computedRecords","filter","p","r","score","scoreAlgorithm","groupWith","list","source","copy","total","length","index","random","temp","shuffle","reduce","reveal","next","pop","close","practiceReducer","session","OverflowableCardBody","Card","Body","Row","div","PracticeSession","isAnswerRevealed","practice","actualRecord","termId","last","speak","synthesis","window","speechSynthesis","cancel","text","u","SpeechSynthesisUtterance","useSpeech","playAfterReveal","handleAnswerButtonClick","className","Button","variant","Configuration","setConfig","c","label","checked","checkedChildren","unCheckedChildren","Layout","PracticePage","PracticeRouter","exact","navItems","NavBar","pathname","useLocation","Navbar","expand","collapseOnSelect","Container","Toggle","flexGrow","Collapse","Nav","idx","Link","href","active","StyledApp","StyledContent","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","VOCABULARY_KEY","store","configureStore","preloadedState","setMany","localStorage","getItem","JSON","parse","loadState","subscribe","data","getState","setItem","stringify","ReactDOM","StrictMode","document","getElementById","navigator","addEventListener","serviceWorker","register","once","passive"],"mappings":"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","file":"static/js/main.2882e874.chunk.js","sourcesContent":["export interface Word {\r\n  meanings: Meaning[];\r\n}\r\n\r\nexport interface Meaning {\r\n  partOfSpeech: string;\r\n  definitions: Definition[];\r\n}\r\n\r\nexport interface Definition {\r\n  definition: string;\r\n}\r\n\r\nexport class DictionaryApi {\r\n  private controller = new AbortController();\r\n\r\n  public abort() {\r\n    this.controller.abort();\r\n  }\r\n\r\n  public async word(word: string): Promise<Word[]> {\r\n    const response = await fetch(\r\n      `https://api.dictionaryapi.dev/api/v2/entries/en_US/${word}`,\r\n      {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n        },\r\n        signal: this.controller.signal,\r\n      }\r\n    );\r\n\r\n    return await response.json();\r\n  }\r\n}\r\n","import { useEffect, useState } from \"react\";\nimport { DictionaryApi, Word } from \"services/dictionaryApi\";\nimport styled from \"styled-components\";\n\nconst StyledUl = styled.ul`\n  color: white;\n`;\n\nexport interface DefinitionsListProps {\n  word: string;\n  onPartOfSpeechClick?: (partOfSpeech: string) => void;\n  onDefinitionClick?: (values: {\n    partOfSpeech: string;\n    definition: string;\n  }) => void;\n}\n\nexport function DefinitionsList(props: DefinitionsListProps) {\n  const { word, onPartOfSpeechClick, onDefinitionClick } = props;\n  const [entry, setEntry] = useState<Word | undefined>();\n\n  useEffect(() => {\n    if (word === \"\") {\n      setEntry(undefined);\n      return;\n    }\n    const api = new DictionaryApi();\n    api\n      .word(word)\n      .then((result) => {\n        setEntry(result[0]);\n      })\n      .catch((reason) => console.error(reason));\n\n    return () => api.abort();\n  }, [word]);\n\n  return (\n    <StyledUl>\n      {entry?.meanings.map((meaning, i) => (\n        <li key={i}>\n          <div\n            onClick={() =>\n              onPartOfSpeechClick && onPartOfSpeechClick(meaning.partOfSpeech)\n            }\n          >\n            {meaning.partOfSpeech}\n          </div>\n          <ul>\n            {meaning.definitions.map((definition, j) => (\n              <li\n                key={j}\n                onClick={() =>\n                  onDefinitionClick &&\n                  onDefinitionClick({\n                    partOfSpeech: meaning.partOfSpeech,\n                    definition: definition.definition,\n                  })\n                }\n              >\n                {definition.definition}\n              </li>\n            ))}\n          </ul>\n        </li>\n      ))}\n    </StyledUl>\n  );\n}\n","import { createEntityAdapter } from \"@reduxjs/toolkit\";\r\nimport { AppState } from \"reducer\";\r\nimport { Term } from \"types/Term\";\r\n\r\nexport const termAdapter = createEntityAdapter<Term>({\r\n  selectId: (term) => term.id,\r\n  sortComparer: (a, b) => a.id - b.id,\r\n});\r\n\r\nexport const { selectAll, selectById, selectEntities, selectIds, selectTotal } =\r\n  termAdapter.getSelectors<AppState>((s) => s.dictionary);\r\n","import { combineReducers, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { Term } from \"types/Term\";\r\nimport { termAdapter } from \"./adapters\";\r\n\r\nexport interface Answer<T> {\r\n  isCorrect: boolean;\r\n  entity: T;\r\n}\r\n\r\nconst initialState = termAdapter.getInitialState();\r\n\r\nexport const dictionarySlice = createSlice({\r\n  name: \"dictionary\",\r\n  initialState,\r\n  reducers: {\r\n    addOne: {\r\n      reducer: termAdapter.addOne,\r\n      prepare: (entry: Term) => {\r\n        return {\r\n          payload: {\r\n            ...entry,\r\n            id: Date.now(),\r\n          },\r\n        };\r\n      },\r\n    },\r\n    updateOne: termAdapter.updateOne,\r\n    removeOne: termAdapter.removeOne,\r\n    answer: (\r\n      state,\r\n      { payload: { entity, isCorrect } }: PayloadAction<Answer<Term>>\r\n    ) => {\r\n      const record = state.entities[entity.id];\r\n      if (record) {\r\n        record.answersCount++;\r\n        if (isCorrect) record.correctAnswersCount++;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport interface TableState {\r\n  page: number;\r\n}\r\n\r\nexport const tableSlice = createSlice({\r\n  name: \"records/table\",\r\n  initialState: {\r\n    page: 1,\r\n  } as TableState,\r\n  reducers: {\r\n    update: (state, { payload }: PayloadAction<Partial<TableState>>) => ({\r\n      ...state,\r\n      ...payload,\r\n    }),\r\n  },\r\n});\r\n\r\nexport const recordsReducer = combineReducers({\r\n  table: tableSlice.reducer,\r\n});\r\n","import { TypedUseSelectorHook, useSelector } from \"react-redux\";\r\nimport { AppState } from \"reducer\";\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<AppState> = useSelector;\r\n","import { createSelector } from \"reselect\";\r\nimport { selectAll } from \"routes/list/adapters\";\r\n\r\nexport const selectTermOptions = createSelector(selectAll, (terms) =>\r\n  terms.map(({ word }) => ({ value: word }))\r\n);\r\n\r\nexport const selectUniqPartOfSpeechOptions = createSelector(\r\n  selectAll,\r\n  (terms) =>\r\n    Array.from(new Set(terms.map((term) => term.partOfSpeech))).map(\r\n      (partOfSpeech) => ({ value: partOfSpeech })\r\n    )\r\n);\r\n","import { Button, Input, AutoComplete } from \"antd\";\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { DefinitionsList } from \"./DefinitionsList\";\nimport { AppState } from \"reducer\";\nimport { Term } from \"types/Term\";\nimport { dictionarySlice } from \"routes/list/reducer\";\nimport { selectById } from \"routes/list/adapters\";\nimport { useTypedSelector } from \"hooks/useTypedSelector\";\nimport {\n  selectTermOptions,\n  selectUniqPartOfSpeechOptions,\n} from \"./selectors\";\n\nexport interface RecordPageProps {}\n\nexport function RecordPage(props: RecordPageProps) {\n  const { id } = useParams<{ id?: string }>();\n\n  const editedEntry = useSelector<AppState, Term | undefined>((s) =>\n    id ? selectById(s, parseInt(id)) : undefined\n  );\n\n  const [entry, setEntry] = useState<Term>({\n    id: 0,\n    word: \"\",\n    partOfSpeech: \"\",\n    translation: \"\",\n    definition: \"\",\n    answersCount: 0,\n    correctAnswersCount: 0,\n    ...(editedEntry ?? {}),\n  });\n\n  const history = useHistory();\n\n  const navigateRoot = () => history.push(\"/\");\n\n  const dispatch = useDispatch();\n  const handleConfirm = () => {\n    dispatch(\n      id\n        ? dictionarySlice.actions.updateOne({ id: entry.id, changes: entry })\n        : dictionarySlice.actions.addOne(entry)\n    );\n    navigateRoot();\n  };\n\n  const handleCancel = () => navigateRoot();\n\n  const handleChange = (values: Partial<Term>) =>\n    setEntry((entry) => ({ ...entry, ...values }));\n\n  const termOptions = useTypedSelector(selectTermOptions);\n  const uniqPartOfSpeechOptions = useTypedSelector(\n    selectUniqPartOfSpeechOptions\n  );\n  return (\n    <>\n      <AutoComplete\n        allowClear\n        placeholder=\"Word\"\n        value={entry.word}\n        options={termOptions}\n        filterOption={(inputValue, option) =>\n          typeof option?.value === \"string\" &&\n          option.value.startsWith(inputValue)\n        }\n        onChange={(value) => handleChange({ word: value ?? \"\" })}\n        onSelect={(value) => handleChange({ word: value })}\n        style={{ width: \"100%\" }}\n      />\n      <AutoComplete\n        allowClear\n        placeholder=\"Part ot speech\"\n        value={entry.partOfSpeech}\n        options={uniqPartOfSpeechOptions}\n        onChange={(value) => handleChange({ partOfSpeech: value ?? \"\" })}\n        onSelect={(value) => handleChange({ partOfSpeech: value })}\n        style={{ width: \"100%\" }}\n      />\n      <Input\n        placeholder=\"Translation\"\n        value={entry.translation}\n        onChange={(e) => handleChange({ translation: e.target.value })}\n      />\n      <Input.TextArea\n        placeholder=\"Definition\"\n        value={entry.definition}\n        onChange={(e) => handleChange({ definition: e.target.value })}\n      />\n      <Button type=\"primary\" onClick={handleConfirm}>\n        Confirm\n      </Button>\n      <Button type=\"primary\" danger onClick={handleCancel}>\n        Cancel\n      </Button>\n      <DefinitionsList\n        word={entry.word}\n        onPartOfSpeechClick={(partOfSpeech) => handleChange({ partOfSpeech })}\n        onDefinitionClick={(values) => handleChange(values)}\n      />\n    </>\n  );\n}\n","import { Redirect, Route, Switch, useRouteMatch } from \"react-router-dom\";\nimport { RecordPage } from \"./Page\";\n\nexport function RecordRouter() {\n  const { path } = useRouteMatch();\n\n  return (\n    <Switch>\n      <Route path={`${path}/:id?`} component={RecordPage} />\n      <Redirect to={`${path}`} />\n    </Switch>\n  );\n}\n","import styled from \"styled-components\";\r\nimport { Table as AntdTable, TableProps } from \"antd\";\r\n\r\nconst StyledTable = styled(AntdTable)`\r\n  .ant-pagination {\r\n    background-color: white;\r\n    padding: 16px 0;\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nexport function Table<T>(props: TableProps<T>) {\r\n  // @ts-expect-error\r\n  return <StyledTable {...props} />;\r\n}\r\n","import { DeleteOutlined, EditOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport { Button, Popconfirm, Tooltip } from \"antd\";\nimport { ColumnsType } from \"antd/lib/table\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { sort } from \"ramda\";\nimport { Term } from \"../../types/Term\";\nimport { AppState } from \"reducer\";\nimport { dictionarySlice, tableSlice } from \"./reducer\";\nimport { useTypedSelector } from \"hooks/useTypedSelector\";\nimport { Table } from \"components/Table\";\nimport { selectAll } from \"./adapters\";\n\nexport interface ListPageProps {}\n\nexport function ListPage(props: ListPageProps) {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const columns: ColumnsType<Term> = [\n    {\n      title: \"Word\",\n      dataIndex: \"word\",\n      ellipsis: { showTitle: true },\n    },\n    {\n      title: (\n        <Tooltip title=\"Total answers / Correct answers\">\n          Total / Correct\n        </Tooltip>\n      ),\n      render: (_, record) => (\n        <>\n          {record.answersCount} / {record.correctAnswersCount}\n        </>\n      ),\n    },\n    {\n      title: () => (\n        <Button type=\"primary\" onClick={() => history.push(\"/record\")}>\n          <PlusOutlined />\n        </Button>\n      ),\n      render: (_, record) => (\n        <>\n          <Button onClick={() => history.push(`/record/${record.id}`)}>\n            <EditOutlined />\n          </Button>\n          <Popconfirm\n            title=\"Are you sure to delete this?\"\n            onConfirm={() => {\n              dispatch(dictionarySlice.actions.removeOne(record.id));\n            }}\n          >\n            <Button>\n              <DeleteOutlined />\n            </Button>\n          </Popconfirm>\n        </>\n      ),\n    },\n  ];\n  const items = useSelector<AppState, Term[]>((s) =>\n    sort((a, b) => (b.id ?? 0) - (a.id ?? 0), selectAll(s))\n  );\n  const page = useTypedSelector((s) => s.records.table.page);\n  return (\n    <Table\n      columns={columns}\n      dataSource={items}\n      size=\"middle\"\n      rowKey=\"id\"\n      pagination={{\n        defaultCurrent: page,\n        onChange: (page) => dispatch(tableSlice.actions.update({ page })),\n      }}\n    />\n  );\n}\n","import { ListRouter } from \"./Router\";\n\nexport default ListRouter;\n","import { combineReducers, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { groupWith } from \"ramda\";\r\nimport { Term } from \"types/Term\";\r\nimport { hasDefinition } from \"utils/hasDefinition\";\r\nimport { hasTranslation } from \"utils/hasTranslation\";\r\nimport { shuffle } from \"utils/shuffle\";\r\nimport { computeAnswersAbsoluteScore } from \"utils/computeAnswersAbsoluteScore\";\r\nimport { computeAnswersRelativeScore } from \"utils/computeAnswersRelativeScore\";\r\n\r\nexport enum ScoreAlgorithm {\r\n  relative,\r\n  absolute,\r\n}\r\n\r\nconst SCORE_ALGO_MAP = {\r\n  [ScoreAlgorithm.relative]: computeAnswersRelativeScore,\r\n  [ScoreAlgorithm.absolute]: computeAnswersAbsoluteScore,\r\n};\r\n\r\nexport interface Config {\r\n  scoreAlgorithm: ScoreAlgorithm;\r\n  playAfterReveal: boolean;\r\n}\r\n\r\nexport interface SessionState {\r\n  config: Config | undefined;\r\n  isActive: boolean;\r\n  stack: number[];\r\n  isRevealed: boolean;\r\n}\r\n\r\nconst initialState: SessionState = {\r\n  config: undefined,\r\n  isActive: false,\r\n  stack: [],\r\n  isRevealed: false,\r\n};\r\n\r\nexport const sessionSlice = createSlice({\r\n  name: \"practice/session\",\r\n  initialState,\r\n  reducers: {\r\n    start: {\r\n      reducer: (\r\n        state,\r\n        {\r\n          payload: { stack, config },\r\n        }: PayloadAction<{ stack: number[]; config: Config }>\r\n      ) => ({\r\n        config,\r\n        isActive: true,\r\n        stack,\r\n        isRevealed: false,\r\n      }),\r\n      prepare: (config: Config, terms: Term[]) => {\r\n        const filteredTerms = terms.filter(\r\n          (p) => hasTranslation(p) || hasDefinition(p)\r\n        );\r\n\r\n        const computedRecords = filteredTerms\r\n          .map((r) => ({\r\n            id: r.id,\r\n            score: SCORE_ALGO_MAP[config.scoreAlgorithm](r),\r\n          }))\r\n          .sort((a, b) => b.score - a.score);\r\n\r\n        const stack = groupWith((a, b) => a.score === b.score, computedRecords)\r\n          .map((list) => shuffle(list))\r\n          .reduce<number[]>(\r\n            (stack, terms) => [...stack, ...terms.map((p) => p.id)],\r\n            []\r\n          );\r\n        return {\r\n          payload: {\r\n            config,\r\n            stack,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    reveal: (state) => ({\r\n      ...state,\r\n      isRevealed: true,\r\n    }),\r\n    next: (state) => {\r\n      state.stack.pop();\r\n      state.isRevealed = false;\r\n      return state;\r\n    },\r\n    close: () => ({\r\n      config: undefined,\r\n      isActive: false,\r\n      stack: [],\r\n      isRevealed: false,\r\n    }),\r\n  },\r\n});\r\n\r\nexport const practiceReducer = combineReducers({\r\n  session: sessionSlice.reducer,\r\n});\r\n","import { Route, Switch, useRouteMatch } from \"react-router-dom\";\nimport { ListPage } from \"./Page\";\n\nexport function ListRouter() {\n  const { path } = useRouteMatch();\n\n  return (\n    <Switch>\n      <Route path={`${path}`} component={ListPage} />\n    </Switch>\n  );\n}\n","import { AnswersCountable } from \"./types\";\r\n\r\nexport function computeAnswersRelativeScore({\r\n  answersCount,\r\n  correctAnswersCount,\r\n}: AnswersCountable): number {\r\n  return Math.floor((100 / answersCount) * correctAnswersCount);\r\n}\r\n","import { AnswersCountable } from \"./types\";\r\n\r\nexport function computeAnswersAbsoluteScore({\r\n  answersCount,\r\n  correctAnswersCount,\r\n}: AnswersCountable): number {\r\n  return answersCount + correctAnswersCount;\r\n}\r\n","export interface Translateable {\r\n  translation: string;\r\n}\r\n\r\nexport const hasTranslation = (translateable: Translateable) =>\r\n  translateable.translation !== \"\";\r\n","export interface Definable {\r\n  definition: string;\r\n}\r\n\r\nexport const hasDefinition = (definable: Definable) =>\r\n  definable.definition !== \"\";\r\n","/**\r\n * Shuffle array and return new instance.\r\n */\r\nexport function shuffle<T>(source: readonly T[]): T[] {\r\n  const copy = [...source];\r\n\r\n  let total = copy.length;\r\n\r\n  // While there remain elements to shuffle…\r\n  while (total) {\r\n    // Pick a remaining element…\r\n    const index = Math.floor(Math.random() * total--);\r\n\r\n    // And swap it with the current element.\r\n    const temp = copy[total];\r\n    copy[total] = copy[index];\r\n    copy[index] = temp;\r\n  }\r\n\r\n  return copy;\r\n}\r\n","import { FC } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { Button } from \"components/Button\";\nimport { Card } from \"components/Card\";\nimport { useSpeech } from \"./useSpeech\";\nimport { useTypedSelector } from \"hooks/useTypedSelector\";\nimport { last } from \"ramda\";\nimport { sessionSlice } from \"./reducer\";\nimport { dictionarySlice } from \"routes/list/reducer\";\nimport { useHistory } from \"react-router\";\nimport { selectById } from \"routes/list/adapters\";\n\nconst OverflowableCardBody = styled(Card.Body)`\n  overflow: auto;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 1rem;\n`;\n\ninterface PracticeSessionProps {}\n\nexport const PracticeSession: FC<PracticeSessionProps> = () => {\n  const isAnswerRevealed = useTypedSelector(\n    (s) => s.practice.session.isRevealed\n  );\n\n  const actualRecord = useTypedSelector((s) => {\n    const termId = last(s.practice.session.stack);\n    return termId ? selectById(s, termId) : undefined;\n  });\n\n  const { speak } = useSpeech();\n\n  const playAfterReveal = useTypedSelector(\n    (s) => s.practice.session.config?.playAfterReveal\n  );\n  const dispatch = useDispatch();\n\n  const handleRevealAnswer = () => {\n    dispatch(sessionSlice.actions.reveal());\n    if (actualRecord && playAfterReveal) speak(actualRecord.word);\n  };\n\n  const handleAnswerButtonClick = (isCorrect: boolean) => {\n    if (actualRecord)\n      dispatch(\n        dictionarySlice.actions.answer({\n          isCorrect,\n          entity: actualRecord,\n        })\n      );\n    dispatch(sessionSlice.actions.next());\n  };\n\n  const handleEndSessionButtonClick = () => {\n    dispatch(sessionSlice.actions.close());\n  };\n\n  const history = useHistory();\n  const handleEditButtonClick = () => {\n    history.push(`record/${actualRecord?.id}`);\n  };\n\n  return (\n    <>\n      {actualRecord && (\n        <>\n          <Card>\n            <Card.Body className=\"text-center\">\n              <div>{actualRecord.translation}</div>\n              <div>\n                (<i>{actualRecord.partOfSpeech}</i>)\n              </div>\n            </Card.Body>\n          </Card>\n          <Card>\n            <OverflowableCardBody className=\"text-center\">\n              {actualRecord.definition}\n            </OverflowableCardBody>\n          </Card>\n          <Card>\n            <Card.Body className=\"text-center\">\n              {isAnswerRevealed ? (\n                <Row>\n                  {actualRecord.word}\n                  <Button onClick={() => speak(actualRecord.word)}>\n                    Play it again\n                  </Button>\n                </Row>\n              ) : (\n                \"?\"\n              )}\n            </Card.Body>\n          </Card>\n          {!isAnswerRevealed ? (\n            <Button onClick={handleRevealAnswer}>Reveal answer</Button>\n          ) : (\n            <>\n              <Button\n                variant=\"success\"\n                onClick={() => handleAnswerButtonClick(true)}\n              >\n                I was correct\n              </Button>\n              <Button\n                variant=\"danger\"\n                onClick={() => handleAnswerButtonClick(false)}\n              >\n                I was incorrect\n              </Button>\n            </>\n          )}\n          <Button onClick={handleEditButtonClick}>Edit current term</Button>\n        </>\n      )}\n      <Button onClick={handleEndSessionButtonClick}>End session</Button>\n    </>\n  );\n};\n","import { useEffect } from \"react\";\n\nexport const useSpeech = () => {\n  const synthesis = window.speechSynthesis;\n\n  useEffect(() => () => synthesis.cancel(), [synthesis]);\n\n  return {\n    speak: (text: string) => {\n      synthesis.cancel();\n      const u = new SpeechSynthesisUtterance(text);\n      synthesis.speak(u);\n    },\n  };\n};\n","import { Select, Switch } from \"antd\";\nimport { Button } from \"components/Button\";\nimport { useTypedSelector } from \"hooks/useTypedSelector\";\nimport { FC, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { selectAll } from \"routes/list/adapters\";\nimport { Term } from \"types/Term\";\nimport { Config, ScoreAlgorithm, sessionSlice } from \"./reducer\";\n\nexport interface ConfigurationProps {}\n\nexport const Configuration: FC<ConfigurationProps> = () => {\n  const [config, setConfig] = useState<Config>({\n    scoreAlgorithm: ScoreAlgorithm.relative,\n    playAfterReveal: false,\n  });\n\n  const dispatch = useDispatch();\n\n  const terms = useTypedSelector<Term[]>(selectAll);\n\n  const handleStartSessionButtonClick = () => {\n    dispatch(sessionSlice.actions.start(config, terms));\n  };\n\n  const update = (config: Partial<Config>) =>\n    setConfig((c) => ({ ...c, ...config }));\n\n  const { scoreAlgorithm, playAfterReveal } = config;\n  return (\n    <>\n      <Select\n        value={scoreAlgorithm}\n        options={[\n          { value: ScoreAlgorithm.relative, label: \"relative\" },\n          { value: ScoreAlgorithm.absolute, label: \"absolute\" },\n        ]}\n        onSelect={(_, option) => update({ scoreAlgorithm: option.value })}\n      />\n      <Switch\n        checked={playAfterReveal}\n        checkedChildren={\"Play word after reveal\"}\n        unCheckedChildren={\"Play word after reveal\"}\n        onChange={(checked) => update({ playAfterReveal: checked })}\n      />\n      <Button onClick={handleStartSessionButtonClick}>Start session</Button>\n    </>\n  );\n};\n","import styled from \"styled-components\";\nimport { PracticeSession } from \"./PracticeSession\";\nimport { Configuration } from \"./Configuration\";\nimport { useTypedSelector } from \"hooks/useTypedSelector\";\n\nconst Layout = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n`;\n\nexport interface PracticePageProps {}\n\nexport function PracticePage(props: PracticePageProps) {\n  const isActive = useTypedSelector((s) => s.practice.session.isActive);\n\n  return <Layout>{isActive ? <PracticeSession /> : <Configuration />}</Layout>;\n}\n","import { Redirect, Route, Switch, useRouteMatch } from \"react-router-dom\";\nimport { PracticePage } from \"./Page\";\n\nexport function PracticeRouter() {\n  const { path } = useRouteMatch();\n\n  return (\n    <Switch>\n      <Route path={`${path}`} exact component={PracticePage} />\n      <Redirect to={path} />\n    </Switch>\n  );\n}\n","import React, { FC } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { Container, Nav, Navbar } from \"react-bootstrap\";\n\ninterface NavLink {\n  title: React.ReactNode;\n  path: string;\n}\n\nconst navItems: NavLink[] = [\n  {\n    title: \"List\",\n    path: \"/list\",\n  },\n  {\n    title: \"Practice\",\n    path: \"/practice\",\n  },\n];\n\nexport const NavBar: FC<{}> = () => {\n  const history = useHistory();\n\n  const { pathname } = useLocation();\n  return (\n    <Navbar variant=\"dark\" expand=\"lg\" collapseOnSelect>\n      <Container>\n        <Navbar.Toggle style={{ flexGrow: 1 }} />\n        <Navbar.Collapse>\n          <Nav>\n            {navItems.map(({ title, path }, idx) => (\n              <Nav.Link\n                key={idx}\n                href=\"#\"\n                active={path === pathname}\n                onClick={() => history.push(path)}\n              >\n                {title}\n              </Nav.Link>\n            ))}\n          </Nav>\n        </Navbar.Collapse>\n      </Container>\n    </Navbar>\n  );\n};\n","import { Redirect, Route, Switch } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { RecordRouter } from \"routes/record/Router\";\nimport ListRouter from \"./routes/list\";\nimport { PracticeRouter } from \"routes/practice/Router\";\nimport { NavBar } from \"NavBar\";\n\nconst StyledApp = styled.div`\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  font-size: calc(10px + 2vmin);\n`;\n\nconst StyledContent = styled.div`\n  flex-grow: 1;\n  overflow: auto;\n`;\n\nexport function App() {\n  return (\n    <StyledApp className=\"bg-dark\">\n      <NavBar />\n      <StyledContent>\n        <Switch>\n          <Route path=\"/record\" component={RecordRouter} />\n          <Route path=\"/practice\" component={PracticeRouter} />\n          <Route path=\"/list\" component={ListRouter} />\n          <Redirect to=\"/list\" />\n        </Switch>\n      </StyledContent>\n    </StyledApp>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from \"@reduxjs/toolkit\";\r\nimport { dictionarySlice, recordsReducer } from \"routes/list/reducer\";\r\nimport { practiceReducer } from \"routes/practice/reducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  records: recordsReducer,\r\n  dictionary: dictionarySlice.reducer,\r\n  practice: practiceReducer,\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n","import { Term } from \"types/Term\";\r\n\r\nconst VOCABULARY_KEY = \"vocabulary\";\r\n\r\nexport function loadState(): Term[] | undefined {\r\n  const json = localStorage.getItem(VOCABULARY_KEY);\r\n\r\n  //TODO: add validation\r\n  return json ? JSON.parse(json) : undefined;\r\n}\r\n\r\nexport function persistState(data: Term[]) {\r\n  localStorage.setItem(VOCABULARY_KEY, JSON.stringify(data));\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"antd/dist/antd.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { Provider } from \"react-redux\";\nimport { rootReducer } from \"./reducer\";\nimport { loadState, persistState } from \"persistence\";\nimport { HashRouter } from \"react-router-dom\";\nimport { termAdapter } from \"routes/list/adapters\";\n\nconst store = configureStore({\n  reducer: rootReducer,\n  preloadedState: {\n    dictionary: termAdapter.setMany(\n      termAdapter.getInitialState(),\n      loadState() ?? []\n    ),\n  },\n});\n\nstore.subscribe(() => {\n  const state = store.getState();\n  persistState(termAdapter.getSelectors().selectAll(state.dictionary));\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\nif (\"serviceWorker\" in navigator) {\n  // Use the window load event to keep the page load performant\n  window.addEventListener(\n    \"load\",\n    () => {\n      navigator.serviceWorker.register(\"./service-worker.js\");\n    },\n    { once: true, passive: true }\n  );\n}\n"],"sourceRoot":""}