{"version":3,"sources":["utils.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["shuffle","array","sort","Math","random","prepareAnswersSet","tested","all","incorrects","filter","p","splice","isCorrect","entity","map","sortImmutable","items","comparer","answersComparer","a","b","answersCount","correctAnswersCount","Definitions","props","word","onDefinitionClick","useState","entry","setEntry","useEffect","controller","AbortController","fetch","signal","then","response","json","result","catch","reason","console","error","abort","undefined","meanings","meaning","i","partOfSpeech","definitions","definition","j","onClick","RecordPage","onConfirm","state","useLocation","translation","history","useHistory","type","push","placeholder","value","onChange","e","target","TextArea","ListPage","onDelete","columns","title","dataIndex","ellipsis","showTitle","render","_","record","PlusOutlined","EditOutlined","DeleteOutlined","block","dataSource","size","rowKey","PracticePage","records","onAnswer","stack","actualRecord","pop","actualAnswersSet","setState","actualAnswer","setAnswer","style","textAlign","answer","disabled","Boolean","handleAnswerClick","backgroundColor","id","VOCABULARY_KEY","App","setItems","localStorage","getItem","JSON","parse","setItem","stringify","className","path","item","Date","now","index","findIndex","newItems","oldRecord","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ded19c5.chunk.js","sourcesContent":["/**\r\n * Shuffle array and return new instance.\r\n */\r\nexport function shuffle<T>(array: T[]): T[] {\r\n  return [...array].sort(() => (Math.random() > 0.5 ? 1 : -1));\r\n}\r\n\r\nexport interface Answer<T> {\r\n  isCorrect: boolean;\r\n  entity: T;\r\n}\r\n\r\nexport function prepareAnswersSet<T>(tested: T, all: T[]): Answer<T>[] {\r\n  const allWithoutTested = all.filter((p) => p !== tested);\r\n  const shufledAllWithoutTested = shuffle(allWithoutTested);\r\n  const incorrects = shufledAllWithoutTested.splice(0, 3);\r\n  const set = [\r\n    { isCorrect: true, entity: tested },\r\n    ...incorrects.map((p) => ({ isCorrect: false, entity: p })),\r\n  ];\r\n  const shufledSet = shuffle(set);\r\n  return shufledSet;\r\n}\r\n\r\nexport function sortImmutable<T>(\r\n  items: T[],\r\n  comparer?: (a: T, b: T) => number\r\n): T[] {\r\n  return [...items].sort(comparer);\r\n}\r\n\r\nexport interface AnswersCountable {\r\n  answersCount: number;\r\n  correctAnswersCount: number;\r\n}\r\n\r\nexport function answersComparer<T extends AnswersCountable>(a: T, b: T) {\r\n  const scoreA =\r\n    (a.answersCount + (a.answersCount - a.correctAnswersCount)) * -1;\r\n  const scoreB =\r\n    (b.answersCount + (b.answersCount - b.correctAnswersCount)) * -1;\r\n  return scoreA - scoreB;\r\n}\r\n","import { useEffect, useState } from \"react\";\nimport { Button, Input, Popconfirm, Table, Tooltip } from \"antd\";\nimport \"./App.css\";\nimport {\n  HashRouter,\n  Route,\n  Switch,\n  useHistory,\n  useLocation,\n} from \"react-router-dom\";\nimport { ColumnsType } from \"antd/lib/table\";\nimport { DeleteOutlined, EditOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport {\n  Answer,\n  answersComparer,\n  AnswersCountable,\n  prepareAnswersSet,\n  sortImmutable,\n} from \"./utils\";\n\ntype ApiResult = Word[];\n\ninterface Word {\n  meanings: Meaning[];\n}\n\ninterface Meaning {\n  partOfSpeech: string;\n  definitions: Definition[];\n}\n\ninterface Definition {\n  definition: string;\n}\n\ninterface DefinitionsProps {\n  word: string;\n  onDefinitionClick?: (value: {\n    partOfSpeech: string;\n    definition: string;\n  }) => void;\n}\n\nfunction Definitions(props: DefinitionsProps) {\n  const { word, onDefinitionClick } = props;\n  const [entry, setEntry] = useState<Word | undefined>();\n\n  useEffect(() => {\n    if (word === \"\") {\n      setEntry(undefined);\n      return;\n    }\n    const controller = new AbortController();\n    fetch(`https://api.dictionaryapi.dev/api/v2/entries/en_US/${word}`, {\n      signal: controller.signal,\n    })\n      .then((response) => response.json())\n      .then((result: ApiResult) => {\n        setEntry(result[0]);\n      })\n      .catch((reason) => console.error(reason));\n\n    return () => controller.abort();\n  }, [word]);\n\n  return (\n    <ul>\n      {entry?.meanings.map((meaning, i) => (\n        <li key={i}>\n          {meaning.partOfSpeech}\n          <ul>\n            {meaning.definitions.map((definition, j) => (\n              <li\n                key={j}\n                onClick={() =>\n                  onDefinitionClick &&\n                  onDefinitionClick({\n                    partOfSpeech: meaning.partOfSpeech,\n                    definition: definition.definition,\n                  })\n                }\n              >\n                {definition.definition}\n              </li>\n            ))}\n          </ul>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\ninterface Record extends AnswersCountable {\n  id?: number;\n  word: string;\n  partOfSpeech: string;\n  translation: string;\n  definition: string;\n}\n\nfunction RecordPage({ onConfirm }: { onConfirm?: (r: Record) => void }) {\n  const { state } = useLocation<Record | undefined>();\n\n  const [entry, setEntry] = useState<Record>({\n    word: \"\",\n    partOfSpeech: \"\",\n    translation: \"\",\n    definition: \"\",\n    answersCount: 0,\n    correctAnswersCount: 0,\n    ...(state ?? {}),\n  });\n\n  const history = useHistory();\n  const handleConfirm = () => {\n    onConfirm && onConfirm(entry);\n    history.push(\"/\");\n  };\n\n  return (\n    <>\n      <Button type=\"primary\" onClick={handleConfirm}>\n        Confirm\n      </Button>\n      <Input\n        placeholder=\"Word\"\n        value={entry.word}\n        onChange={(e) => setEntry({ ...entry, word: e.target.value })}\n      />\n      <Input\n        placeholder=\"Pard ot speech\"\n        value={entry.partOfSpeech}\n        onChange={(e) => setEntry({ ...entry, partOfSpeech: e.target.value })}\n      />\n      <Input\n        placeholder=\"Translation\"\n        value={entry.translation}\n        onChange={(e) => setEntry({ ...entry, translation: e.target.value })}\n      />\n      <Input.TextArea\n        placeholder=\"Definition\"\n        value={entry.definition}\n        onChange={(e) => setEntry({ ...entry, definition: e.target.value })}\n      />\n      <Definitions\n        word={entry.word}\n        onDefinitionClick={(value) => setEntry({ ...entry, ...value })}\n      />\n    </>\n  );\n}\n\ninterface ListPageProps {\n  items: Record[];\n  onDelete?: (r: Record) => void;\n}\n\nfunction ListPage({ items, onDelete }: ListPageProps) {\n  const history = useHistory();\n  const columns: ColumnsType<Record> = [\n    {\n      title: \"Word\",\n      dataIndex: \"word\",\n      ellipsis: { showTitle: true },\n    },\n    {\n      title: (\n        <Tooltip title=\"Total answers / Correct answers\">\n          Total / Correct\n        </Tooltip>\n      ),\n      render: (_, record) => (\n        <>\n          {record.answersCount} / {record.correctAnswersCount}\n        </>\n      ),\n    },\n    {\n      title: () => (\n        <Button type=\"primary\" onClick={() => history.push(\"/add\")}>\n          <PlusOutlined />\n        </Button>\n      ),\n      render: (_, record) => (\n        <>\n          <Button onClick={() => history.push(\"/edit\", record)}>\n            <EditOutlined />\n          </Button>\n          <Popconfirm\n            title=\"Are you sure to delete this?\"\n            onConfirm={() => onDelete && onDelete(record)}\n          >\n            <Button>\n              <DeleteOutlined />\n            </Button>\n          </Popconfirm>\n        </>\n      ),\n    },\n  ];\n  return (\n    <>\n      <Button block type=\"primary\" onClick={() => history.push(\"/practice\")}>\n        Practice\n      </Button>\n      <Table columns={columns} dataSource={items} size=\"middle\" rowKey=\"id\" />\n    </>\n  );\n}\n\ninterface PracticePageProps {\n  records: Record[];\n  onAnswer?: (a: Answer<Record>) => void;\n}\n\nfunction PracticePage({ records, onAnswer }: PracticePageProps) {\n  const [state, setState] = useState(() => {\n    const stack = [...records];\n\n    const actualRecord = stack.pop();\n\n    const actualAnswersSet = actualRecord\n      ? prepareAnswersSet(actualRecord, records)\n      : [];\n\n    return { stack, actualRecord, actualAnswersSet };\n  });\n  const [actualAnswer, setAnswer] = useState<Answer<Record>>();\n\n  const handleAnswerClick = (answer: Answer<Record>) => {\n    if (actualAnswer) return;\n    setAnswer(answer);\n    if (onAnswer && state.actualRecord)\n      onAnswer({ isCorrect: answer.isCorrect, entity: state.actualRecord });\n  };\n\n  const handleNextClick = () => {\n    setState((state) => {\n      const stack = [...state.stack];\n\n      const actualRecord = stack.pop();\n\n      const actualAnswersSet = actualRecord\n        ? prepareAnswersSet(actualRecord, records)\n        : [];\n\n      return { stack, actualRecord, actualAnswersSet };\n    });\n    setAnswer(undefined);\n  };\n\n  const history = useHistory();\n  return (\n    <>\n      {state.actualRecord && (\n        <div style={{ textAlign: \"center\" }}>\n          {state.actualRecord.word} (<i>{state.actualRecord.partOfSpeech}</i>)\n        </div>\n      )}\n      {state.actualAnswersSet.map((answer) => (\n        <button\n          key={answer.entity.id}\n          disabled={Boolean(actualAnswer)}\n          onClick={() => handleAnswerClick(answer)}\n          style={{\n            backgroundColor:\n              answer.isCorrect && actualAnswer\n                ? \"green\"\n                : !answer.isCorrect && answer === actualAnswer\n                ? \"red\"\n                : undefined,\n          }}\n        >\n          {answer.entity?.definition}\n        </button>\n      ))}\n\n      {actualAnswer && (\n        <>\n          <div>\n            <hr />\n          </div>\n          <button onClick={handleNextClick}>Next</button>\n        </>\n      )}\n      <div>\n        <hr />\n      </div>\n      <button onClick={() => history.push(\"/\")}>End</button>\n    </>\n  );\n}\n\nconst VOCABULARY_KEY = \"vocabulary\";\n\nfunction App() {\n  const [items, setItems] = useState<Record[]>([]);\n\n  useEffect(() => {\n    const json = localStorage.getItem(VOCABULARY_KEY);\n    if (!json) return;\n    setItems(JSON.parse(json));\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(VOCABULARY_KEY, JSON.stringify(items));\n  }, [items]);\n\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <Switch>\n          <Route path=\"/add\">\n            <RecordPage\n              onConfirm={(item) =>\n                setItems([{ id: Date.now(), ...item }, ...items])\n              }\n            />\n          </Route>\n          <Route path=\"/edit\">\n            <RecordPage\n              onConfirm={(item) => {\n                const index = items.findIndex((p) => p.id === item.id);\n                const newItems = [...items];\n                newItems[index] = item;\n                setItems(newItems);\n              }}\n            />\n          </Route>\n          <Route path=\"/practice\">\n            <PracticePage\n              records={sortImmutable(items, answersComparer)}\n              onAnswer={({ entity, isCorrect }) => {\n                const index = items.findIndex((p) => p.id === entity.id);\n                const newItems = [...items];\n                const oldRecord = newItems[index];\n                newItems[index] = {\n                  ...oldRecord,\n                  answersCount: oldRecord.answersCount + 1,\n                  correctAnswersCount:\n                    oldRecord.correctAnswersCount + (isCorrect ? 1 : 0),\n                };\n                setItems(newItems);\n              }}\n            />\n          </Route>\n          <Route path=\"/\">\n            <ListPage\n              items={items}\n              onDelete={(record) =>\n                setItems(items.filter((p) => p.id !== record.id))\n              }\n            />\n          </Route>\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}