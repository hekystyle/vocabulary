{"version":3,"sources":["DefinitionsList/index.tsx","RecordPage/index.tsx","ListPage/index.tsx","components/Button.tsx","utils.ts","PracticePage/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DefinitionsList","props","word","onDefinitionClick","useState","entry","setEntry","useEffect","controller","AbortController","fetch","signal","then","response","json","result","catch","reason","console","error","abort","undefined","meanings","map","meaning","i","partOfSpeech","definitions","definition","j","onClick","RecordPage","records","onConfirm","id","useParams","translation","answersCount","correctAnswersCount","find","p","parseInt","history","useHistory","navigateRoot","push","type","danger","placeholder","value","onChange","e","target","TextArea","ListPage","items","onDelete","columns","title","dataIndex","ellipsis","showTitle","render","_","record","PlusOutlined","EditOutlined","DeleteOutlined","dataSource","size","rowKey","Button","theme","children","className","rest","shuffle","array","sort","Math","random","prepareAnswersSet","tested","all","incorrects","filter","splice","isCorrect","entity","answersComparer","a","b","hasDefinition","definable","PracticePage","onAnswer","comparer","stack","actualRecord","pop","actualAnswersSet","state","setState","actualAnswer","setAnswer","style","textAlign","answer","disabled","Boolean","handleAnswerClick","VOCABULARY_KEY","App","setItems","localStorage","getItem","JSON","parse","setItem","stringify","path","item","Date","now","index","findIndex","newItems","oldRecord","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1fcce856.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { ApiResult, Word } from \"../types\";\n\nexport interface DefinitionsListProps {\n  word: string;\n  onDefinitionClick?: (value: {\n    partOfSpeech: string;\n    definition: string;\n  }) => void;\n}\n\nexport function DefinitionsList(props: DefinitionsListProps) {\n  const { word, onDefinitionClick } = props;\n  const [entry, setEntry] = useState<Word | undefined>();\n\n  useEffect(() => {\n    if (word === \"\") {\n      setEntry(undefined);\n      return;\n    }\n    const controller = new AbortController();\n    fetch(`https://api.dictionaryapi.dev/api/v2/entries/en_US/${word}`, {\n      signal: controller.signal,\n    })\n      .then((response) => response.json())\n      .then((result: ApiResult) => {\n        setEntry(result[0]);\n      })\n      .catch((reason) => console.error(reason));\n\n    return () => controller.abort();\n  }, [word]);\n\n  return (\n    <ul>\n      {entry?.meanings.map((meaning, i) => (\n        <li key={i}>\n          {meaning.partOfSpeech}\n          <ul>\n            {meaning.definitions.map((definition, j) => (\n              <li\n                key={j}\n                onClick={() =>\n                  onDefinitionClick &&\n                  onDefinitionClick({\n                    partOfSpeech: meaning.partOfSpeech,\n                    definition: definition.definition,\n                  })\n                }\n              >\n                {definition.definition}\n              </li>\n            ))}\n          </ul>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import { Button, Input } from \"antd\";\nimport { useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { DefinitionsList } from \"../DefinitionsList\";\nimport { AnswersCountable, Definable } from \"../utils\";\n\nexport interface DictionaryEntry extends AnswersCountable, Definable {\n  id?: number;\n  word: string;\n  partOfSpeech: string;\n  translation: string;\n}\n\nexport interface RecordPageProps {\n  records: DictionaryEntry[];\n  onConfirm?: (r: DictionaryEntry) => void;\n}\n\nexport function RecordPage({ records, onConfirm }: RecordPageProps) {\n  const { id } = useParams<{ id?: string }>();\n\n  const [entry, setEntry] = useState<DictionaryEntry>({\n    word: \"\",\n    partOfSpeech: \"\",\n    translation: \"\",\n    definition: \"\",\n    answersCount: 0,\n    correctAnswersCount: 0,\n    ...(id ? records.find((p) => p.id === parseInt(id)) ?? {} : {}),\n  });\n\n  const history = useHistory();\n\n  const navigateRoot = () => history.push(\"/\");\n\n  const handleConfirm = () => {\n    onConfirm && onConfirm(entry);\n    navigateRoot();\n  };\n\n  const handleCancel = () => navigateRoot();\n\n  return (\n    <>\n      <Button type=\"primary\" danger onClick={handleCancel}>\n        Cancel\n      </Button>\n      <Button type=\"primary\" onClick={handleConfirm}>\n        Confirm\n      </Button>\n      <Input\n        placeholder=\"Word\"\n        value={entry.word}\n        onChange={(e) => setEntry({ ...entry, word: e.target.value })}\n      />\n      <Input\n        placeholder=\"Pard ot speech\"\n        value={entry.partOfSpeech}\n        onChange={(e) => setEntry({ ...entry, partOfSpeech: e.target.value })}\n      />\n      <Input\n        placeholder=\"Translation\"\n        value={entry.translation}\n        onChange={(e) => setEntry({ ...entry, translation: e.target.value })}\n      />\n      <Input.TextArea\n        placeholder=\"Definition\"\n        value={entry.definition}\n        onChange={(e) => setEntry({ ...entry, definition: e.target.value })}\n      />\n      <DefinitionsList\n        word={entry.word}\n        onDefinitionClick={(value) => setEntry({ ...entry, ...value })}\n      />\n    </>\n  );\n}\n","import { DeleteOutlined, EditOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport { Button, Popconfirm, Tooltip } from \"antd\";\nimport Table, { ColumnsType } from \"antd/lib/table\";\nimport { useHistory } from \"react-router-dom\";\nimport { DictionaryEntry } from \"../RecordPage\";\n\nexport interface ListPageProps {\n  items: DictionaryEntry[];\n  onDelete?: (r: DictionaryEntry) => void;\n}\n\nexport function ListPage({ items, onDelete }: ListPageProps) {\n  const history = useHistory();\n  const columns: ColumnsType<DictionaryEntry> = [\n    {\n      title: \"Word\",\n      dataIndex: \"word\",\n      ellipsis: { showTitle: true },\n    },\n    {\n      title: (\n        <Tooltip title=\"Total answers / Correct answers\">\n          Total / Correct\n        </Tooltip>\n      ),\n      render: (_, record) => (\n        <>\n          {record.answersCount} / {record.correctAnswersCount}\n        </>\n      ),\n    },\n    {\n      title: () => (\n        <Button type=\"primary\" onClick={() => history.push(\"/add\")}>\n          <PlusOutlined />\n        </Button>\n      ),\n      render: (_, record) => (\n        <>\n          <Button onClick={() => history.push(`/edit/${record.id}`)}>\n            <EditOutlined />\n          </Button>\n          <Popconfirm\n            title=\"Are you sure to delete this?\"\n            onConfirm={() => onDelete && onDelete(record)}\n          >\n            <Button>\n              <DeleteOutlined />\n            </Button>\n          </Popconfirm>\n        </>\n      ),\n    },\n  ];\n  return (\n    <>\n      <Button type=\"primary\" onClick={() => history.push(\"/practice\")}>\n        Practice definitions\n      </Button>\n      <Table columns={columns} dataSource={items} size=\"middle\" rowKey=\"id\" />\n    </>\n  );\n}\n","import { ButtonHTMLAttributes, DetailedHTMLProps } from \"react\";\n\nexport type Theme =\n  | \"primary\"\n  | \"secondary\"\n  | \"success\"\n  | \"warning\"\n  | \"danger\"\n  | \"info\";\n\ntype NativeButtonProps = DetailedHTMLProps<\n  ButtonHTMLAttributes<HTMLButtonElement>,\n  HTMLButtonElement\n>;\n\nexport interface ButtonProps extends NativeButtonProps {\n  /**\n   * @default \"primary\"\n   */\n  theme?: Theme;\n}\n\nexport function Button({ theme, children, className, ...rest }: ButtonProps) {\n  return (\n    <button\n      {...rest}\n      className={`btn btn-${theme ?? \"primary\"} ${className ?? \"\"}`}\n    >\n      {children}\n    </button>\n  );\n}\n","/**\r\n * Shuffle array and return new instance.\r\n */\r\nexport function shuffle<T>(array: T[]): T[] {\r\n  return [...array].sort(() => (Math.random() > 0.5 ? 1 : -1));\r\n}\r\n\r\nexport interface Answer<T> {\r\n  isCorrect: boolean;\r\n  entity: T;\r\n}\r\n\r\nexport function prepareAnswersSet<T>(tested: T, all: T[]): Answer<T>[] {\r\n  const allWithoutTested = all.filter((p) => p !== tested);\r\n  const shufledAllWithoutTested = shuffle(allWithoutTested);\r\n  const incorrects = shufledAllWithoutTested.splice(0, 3);\r\n  const set = [\r\n    { isCorrect: true, entity: tested },\r\n    ...incorrects.map((p) => ({ isCorrect: false, entity: p })),\r\n  ];\r\n  const shufledSet = shuffle(set);\r\n  return shufledSet;\r\n}\r\n\r\nexport function sortImmutable<T>(\r\n  items: T[],\r\n  comparer?: (a: T, b: T) => number\r\n): T[] {\r\n  return [...items].sort(comparer);\r\n}\r\n\r\nexport interface AnswersCountable {\r\n  answersCount: number;\r\n  correctAnswersCount: number;\r\n}\r\n\r\nexport function answersComparer<T extends AnswersCountable>(a: T, b: T) {\r\n  const scoreA =\r\n    (a.answersCount + (a.answersCount - a.correctAnswersCount)) * -1;\r\n  const scoreB =\r\n    (b.answersCount + (b.answersCount - b.correctAnswersCount)) * -1;\r\n  return scoreA - scoreB;\r\n}\r\n\r\nexport interface Definable {\r\n  definition: string;\r\n}\r\n\r\nexport const hasDefinition = (definable: Definable) =>\r\n  definable.definition !== \"\";\r\n","import { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button } from \"../components/Button\";\nimport { DictionaryEntry } from \"../RecordPage\";\nimport {\n  Answer,\n  answersComparer,\n  hasDefinition,\n  prepareAnswersSet,\n  sortImmutable,\n} from \"../utils\";\nimport \"./index.css\";\n\nexport interface PracticePageProps {\n  records: DictionaryEntry[];\n  onAnswer?: (a: Answer<DictionaryEntry>) => void;\n}\n\nexport function PracticePage({ records, onAnswer }: PracticePageProps) {\n  const [state, setState] = useState(() => {\n    const stack = sortImmutable(records.filter(hasDefinition), answersComparer);\n\n    const actualRecord = stack.pop();\n\n    const actualAnswersSet = actualRecord\n      ? prepareAnswersSet(actualRecord, records)\n      : [];\n\n    return { stack, actualRecord, actualAnswersSet };\n  });\n  const [actualAnswer, setAnswer] = useState<Answer<DictionaryEntry>>();\n\n  const handleAnswerClick = (answer: Answer<DictionaryEntry>) => {\n    if (actualAnswer) return;\n    setAnswer(answer);\n    if (onAnswer && state.actualRecord)\n      onAnswer({ isCorrect: answer.isCorrect, entity: state.actualRecord });\n  };\n\n  const handleNextClick = () => {\n    setState((state) => {\n      const stack = [...state.stack];\n\n      const actualRecord = stack.pop();\n\n      const actualAnswersSet = actualRecord\n        ? prepareAnswersSet(actualRecord, records)\n        : [];\n\n      return { stack, actualRecord, actualAnswersSet };\n    });\n    setAnswer(undefined);\n  };\n\n  const history = useHistory();\n  return (\n    <>\n      {state.actualRecord && (\n        <div style={{ textAlign: \"center\" }}>\n          {state.actualRecord.word} (<i>{state.actualRecord.partOfSpeech}</i>)\n        </div>\n      )}\n      <div className=\"ButtonsGrid\">\n        {state.actualAnswersSet.map((answer) => (\n          <Button\n            key={answer.entity.id}\n            className=\"AnswerButton\"\n            disabled={Boolean(actualAnswer)}\n            onClick={() => handleAnswerClick(answer)}\n            theme={\n              answer.isCorrect && actualAnswer\n                ? \"success\"\n                : !answer.isCorrect && answer === actualAnswer\n                ? \"danger\"\n                : \"secondary\"\n            }\n          >\n            {answer.entity?.definition}\n          </Button>\n        ))}\n      </div>\n\n      {actualAnswer && (\n        <>\n          <div>\n            <hr />\n          </div>\n          <Button onClick={handleNextClick}>Next word</Button>\n        </>\n      )}\n      <div>\n        <hr />\n      </div>\n      <Button onClick={() => history.push(\"/\")}>End practice</Button>\n    </>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport { Answer } from \"./utils\";\nimport { DictionaryEntry, RecordPage } from \"./RecordPage\";\nimport { ListPage } from \"./ListPage\";\nimport { PracticePage } from \"./PracticePage\";\n\nconst VOCABULARY_KEY = \"vocabulary\";\n\nexport function App() {\n  const [items, setItems] = useState<DictionaryEntry[]>([]);\n\n  useEffect(() => {\n    const json = localStorage.getItem(VOCABULARY_KEY);\n    if (!json) return;\n    setItems(JSON.parse(json));\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(VOCABULARY_KEY, JSON.stringify(items));\n  }, [items]);\n\n  const handleAddRecord = (item: DictionaryEntry) =>\n    setItems([{ id: Date.now(), ...item }, ...items]);\n\n  const handleEditRecord = (item: DictionaryEntry) => {\n    const index = items.findIndex((p) => p.id === item.id);\n    const newItems = [...items];\n    newItems[index] = item;\n    setItems(newItems);\n  };\n\n  const handleDeleteRecord = (item: DictionaryEntry) => {\n    setItems(items.filter((p) => p.id !== item.id));\n  };\n\n  const handleAnswer = ({ isCorrect, entity }: Answer<DictionaryEntry>) => {\n    const index = items.findIndex((p) => p.id === entity.id);\n    const newItems = [...items];\n    const oldRecord = newItems[index];\n    newItems[index] = {\n      ...oldRecord,\n      answersCount: oldRecord.answersCount + 1,\n      correctAnswersCount: oldRecord.correctAnswersCount + (isCorrect ? 1 : 0),\n    };\n    setItems(newItems);\n  };\n\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <Switch>\n          <Route path=\"/add\">\n            <RecordPage records={items} onConfirm={handleAddRecord} />\n          </Route>\n          <Route path=\"/edit/:id\">\n            <RecordPage records={items} onConfirm={handleEditRecord} />\n          </Route>\n          <Route path=\"/practice\">\n            <PracticePage records={items} onAnswer={handleAnswer} />\n          </Route>\n          <Route path=\"/\">\n            <ListPage items={items} onDelete={handleDeleteRecord} />\n          </Route>\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"antd/dist/antd.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}