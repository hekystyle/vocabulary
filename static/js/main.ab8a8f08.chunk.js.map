{"version":3,"sources":["DefinitionsList/index.tsx","RecordPage/index.tsx","ListPage/index.tsx","components/Button.tsx","utils.ts","PracticePage/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DefinitionsList","props","word","onPartOfSpeechClick","onDefinitionClick","useState","entry","setEntry","useEffect","controller","AbortController","fetch","signal","then","response","json","result","catch","reason","console","error","abort","undefined","meanings","map","meaning","i","onClick","partOfSpeech","definitions","definition","j","RecordPage","records","onConfirm","id","useParams","translation","answersCount","correctAnswersCount","find","p","parseInt","history","useHistory","navigateRoot","push","type","danger","placeholder","value","onChange","e","target","TextArea","values","ListPage","items","onDelete","columns","title","dataIndex","ellipsis","showTitle","render","_","record","PlusOutlined","EditOutlined","DeleteOutlined","dataSource","size","rowKey","Button","theme","children","className","rest","shuffle","array","sort","Math","random","prepareAnswersSet","tested","all","incorrects","filter","splice","isCorrect","entity","computeAnswersScore","answersComparer","a","b","scoreA","Knowledge","ButtonsGrid","styled","div","FILTERS","definable","translateable","SELECTORS","d","t","PracticePage","knowledge","setKnowledge","onSelect","KnowledgeSelection","PracticeSession","onAnswer","filteredRecords","useMemo","comparer","stack","actualRecord","pop","actualAnswersSet","progress","setProgress","actualAnswer","setAnswer","style","textAlign","answer","disabled","Boolean","handleAnswerClick","state","VOCABULARY_KEY","StyledApp","App","setItems","localStorage","getItem","JSON","parse","setItem","stringify","path","item","Date","now","index","findIndex","newItems","oldRecord","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ab8a8f08.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { ApiResult, Word } from \"../types\";\n\nexport interface DefinitionsListProps {\n  word: string;\n  onPartOfSpeechClick?: (partOfSpeech: string) => void;\n  onDefinitionClick?: (values: {\n    partOfSpeech: string;\n    definition: string;\n  }) => void;\n}\n\nexport function DefinitionsList(props: DefinitionsListProps) {\n  const { word, onPartOfSpeechClick, onDefinitionClick } = props;\n  const [entry, setEntry] = useState<Word | undefined>();\n\n  useEffect(() => {\n    if (word === \"\") {\n      setEntry(undefined);\n      return;\n    }\n    const controller = new AbortController();\n    fetch(`https://api.dictionaryapi.dev/api/v2/entries/en_US/${word}`, {\n      signal: controller.signal,\n    })\n      .then((response) => response.json())\n      .then((result: ApiResult) => {\n        setEntry(result[0]);\n      })\n      .catch((reason) => console.error(reason));\n\n    return () => controller.abort();\n  }, [word]);\n\n  return (\n    <ul>\n      {entry?.meanings.map((meaning, i) => (\n        <li key={i}>\n          <div\n            onClick={() =>\n              onPartOfSpeechClick && onPartOfSpeechClick(meaning.partOfSpeech)\n            }\n          >\n            {meaning.partOfSpeech}\n          </div>\n          <ul>\n            {meaning.definitions.map((definition, j) => (\n              <li\n                key={j}\n                onClick={() =>\n                  onDefinitionClick &&\n                  onDefinitionClick({\n                    partOfSpeech: meaning.partOfSpeech,\n                    definition: definition.definition,\n                  })\n                }\n              >\n                {definition.definition}\n              </li>\n            ))}\n          </ul>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import { Button, Input } from \"antd\";\nimport { useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { DefinitionsList } from \"../DefinitionsList\";\nimport { AnswersCountable, Definable } from \"../utils\";\n\nexport interface DictionaryEntry extends AnswersCountable, Definable {\n  id?: number;\n  word: string;\n  partOfSpeech: string;\n  translation: string;\n}\n\nexport interface RecordPageProps {\n  records: DictionaryEntry[];\n  onConfirm?: (r: DictionaryEntry) => void;\n}\n\nexport function RecordPage({ records, onConfirm }: RecordPageProps) {\n  const { id } = useParams<{ id?: string }>();\n\n  const [entry, setEntry] = useState<DictionaryEntry>({\n    word: \"\",\n    partOfSpeech: \"\",\n    translation: \"\",\n    definition: \"\",\n    answersCount: 0,\n    correctAnswersCount: 0,\n    ...(id ? records.find((p) => p.id === parseInt(id)) ?? {} : {}),\n  });\n\n  const history = useHistory();\n\n  const navigateRoot = () => history.push(\"/\");\n\n  const handleConfirm = () => {\n    onConfirm && onConfirm(entry);\n    navigateRoot();\n  };\n\n  const handleCancel = () => navigateRoot();\n\n  return (\n    <>\n      <Button type=\"primary\" danger onClick={handleCancel}>\n        Cancel\n      </Button>\n      <Button type=\"primary\" onClick={handleConfirm}>\n        Confirm\n      </Button>\n      <Input\n        placeholder=\"Word\"\n        value={entry.word}\n        onChange={(e) => setEntry({ ...entry, word: e.target.value })}\n      />\n      <Input\n        placeholder=\"Pard ot speech\"\n        value={entry.partOfSpeech}\n        onChange={(e) => setEntry({ ...entry, partOfSpeech: e.target.value })}\n      />\n      <Input\n        placeholder=\"Translation\"\n        value={entry.translation}\n        onChange={(e) => setEntry({ ...entry, translation: e.target.value })}\n      />\n      <Input.TextArea\n        placeholder=\"Definition\"\n        value={entry.definition}\n        onChange={(e) => setEntry({ ...entry, definition: e.target.value })}\n      />\n      <DefinitionsList\n        word={entry.word}\n        onPartOfSpeechClick={(partOfSpeech) =>\n          setEntry((entry) => ({ ...entry, partOfSpeech }))\n        }\n        onDefinitionClick={(values) =>\n          setEntry((entry) => ({ ...entry, ...values }))\n        }\n      />\n    </>\n  );\n}\n","import { DeleteOutlined, EditOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport { Button, Popconfirm, Tooltip } from \"antd\";\nimport Table, { ColumnsType } from \"antd/lib/table\";\nimport { useHistory } from \"react-router-dom\";\nimport { DictionaryEntry } from \"../RecordPage\";\n\nexport interface ListPageProps {\n  items: DictionaryEntry[];\n  onDelete?: (r: DictionaryEntry) => void;\n}\n\nexport function ListPage({ items, onDelete }: ListPageProps) {\n  const history = useHistory();\n  const columns: ColumnsType<DictionaryEntry> = [\n    {\n      title: \"Word\",\n      dataIndex: \"word\",\n      ellipsis: { showTitle: true },\n    },\n    {\n      title: (\n        <Tooltip title=\"Total answers / Correct answers\">\n          Total / Correct\n        </Tooltip>\n      ),\n      render: (_, record) => (\n        <>\n          {record.answersCount} / {record.correctAnswersCount}\n        </>\n      ),\n    },\n    {\n      title: () => (\n        <Button type=\"primary\" onClick={() => history.push(\"/add\")}>\n          <PlusOutlined />\n        </Button>\n      ),\n      render: (_, record) => (\n        <>\n          <Button onClick={() => history.push(`/edit/${record.id}`)}>\n            <EditOutlined />\n          </Button>\n          <Popconfirm\n            title=\"Are you sure to delete this?\"\n            onConfirm={() => onDelete && onDelete(record)}\n          >\n            <Button>\n              <DeleteOutlined />\n            </Button>\n          </Popconfirm>\n        </>\n      ),\n    },\n  ];\n  return (\n    <>\n      <Button type=\"primary\" onClick={() => history.push(\"/practice\")}>\n        Practice\n      </Button>\n      <Table columns={columns} dataSource={items} size=\"middle\" rowKey=\"id\" />\n    </>\n  );\n}\n","import { ButtonHTMLAttributes, DetailedHTMLProps } from \"react\";\n\nexport type Theme =\n  | \"primary\"\n  | \"secondary\"\n  | \"success\"\n  | \"warning\"\n  | \"danger\"\n  | \"info\";\n\ntype NativeButtonProps = DetailedHTMLProps<\n  ButtonHTMLAttributes<HTMLButtonElement>,\n  HTMLButtonElement\n>;\n\nexport interface ButtonProps extends NativeButtonProps {\n  /**\n   * @default \"primary\"\n   */\n  theme?: Theme;\n}\n\nexport function Button({ theme, children, className, ...rest }: ButtonProps) {\n  return (\n    <button\n      {...rest}\n      className={`btn btn-${theme ?? \"primary\"} ${className ?? \"\"}`}\n    >\n      {children}\n    </button>\n  );\n}\n","/**\r\n * Shuffle array and return new instance.\r\n */\r\nexport function shuffle<T>(array: T[]): T[] {\r\n  return [...array].sort(() => (Math.random() > 0.5 ? 1 : -1));\r\n}\r\n\r\nexport interface Answer<T> {\r\n  isCorrect: boolean;\r\n  entity: T;\r\n}\r\n\r\nexport function prepareAnswersSet<T>(tested: T, all: T[]): Answer<T>[] {\r\n  const allWithoutTested = all.filter((p) => p !== tested);\r\n  const shufledAllWithoutTested = shuffle(allWithoutTested);\r\n  const incorrects = shufledAllWithoutTested.splice(0, 3);\r\n  const set = [\r\n    { isCorrect: true, entity: tested },\r\n    ...incorrects.map((p) => ({ isCorrect: false, entity: p })),\r\n  ];\r\n  const shufledSet = shuffle(set);\r\n  return shufledSet;\r\n}\r\n\r\nexport function sortImmutable<T>(\r\n  items: T[],\r\n  comparer?: (a: T, b: T) => number\r\n): T[] {\r\n  return [...items].sort(comparer);\r\n}\r\n\r\nexport interface AnswersCountable {\r\n  answersCount: number;\r\n  correctAnswersCount: number;\r\n}\r\n\r\nexport function computeAnswersScore<T extends AnswersCountable>({\r\n  answersCount,\r\n  correctAnswersCount,\r\n}: T): number {\r\n  return answersCount + correctAnswersCount;\r\n}\r\n\r\nexport function answersComparer<T extends AnswersCountable>(a: T, b: T) {\r\n  const [scoreA, scoreB] = [a, b].map(computeAnswersScore);\r\n\r\n  return scoreB - scoreA;\r\n}\r\n\r\nexport interface Definable {\r\n  definition: string;\r\n}\r\n\r\nexport const hasDefinition = (definable: Definable) =>\r\n  definable.definition !== \"\";\r\n\r\nexport interface Translateable {\r\n  translation: string;\r\n}\r\n\r\nexport const hasTranslation = (translateable: Translateable) =>\r\n  translateable.translation !== \"\";\r\n","import { FC, useMemo, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { Button } from \"../components/Button\";\nimport { DictionaryEntry } from \"../RecordPage\";\nimport {\n  Answer,\n  answersComparer,\n  Definable,\n  hasDefinition,\n  hasTranslation,\n  prepareAnswersSet,\n  sortImmutable,\n  Translateable,\n} from \"../utils\";\n\nconst ButtonsGrid = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n`;\n\nexport enum Knowledge {\n  translation,\n  definition,\n}\n\nconst FILTERS = {\n  [Knowledge.definition]: hasDefinition,\n  [Knowledge.translation]: hasTranslation,\n};\n\nconst SELECTORS = {\n  [Knowledge.definition]: (d: Definable) => d.definition,\n  [Knowledge.translation]: (t: Translateable) => t.translation,\n};\n\ntype OnAnswerHandler = (a: Answer<DictionaryEntry>) => void;\nexport interface PracticePageProps {\n  records: DictionaryEntry[];\n  onAnswer?: OnAnswerHandler;\n}\n\nexport function PracticePage(props: PracticePageProps) {\n  const [knowledge, setKnowledge] = useState<Knowledge>();\n\n  const history = useHistory();\n  return (\n    <>\n      {knowledge === undefined ? (\n        <KnowledgeSelection onSelect={setKnowledge} />\n      ) : (\n        <PracticeSession knowledge={knowledge} {...props} />\n      )}\n      <div>\n        <hr />\n      </div>\n      <Button onClick={() => history.push(\"/\")}>End practice</Button>\n    </>\n  );\n}\n\ninterface KnowledgeSelectionProps {\n  onSelect?: (k: Knowledge) => void;\n}\n\nconst KnowledgeSelection: FC<KnowledgeSelectionProps> = ({ onSelect }) => (\n  <ButtonsGrid>\n    {[Knowledge.definition, Knowledge.translation].map((knowledge) => (\n      <Button key={knowledge} onClick={() => onSelect && onSelect(knowledge)}>\n        {Knowledge[knowledge]}\n      </Button>\n    ))}\n  </ButtonsGrid>\n);\n\ninterface PracticeSessionProps extends PracticePageProps {\n  knowledge: Knowledge;\n}\n\ninterface Progress {\n  stack: DictionaryEntry[];\n  actualRecord?: DictionaryEntry;\n  actualAnswersSet: Answer<DictionaryEntry>[];\n}\n\nconst PracticeSession: FC<PracticeSessionProps> = ({\n  records,\n  knowledge,\n  onAnswer,\n}) => {\n  const filteredRecords = useMemo(\n    () => records.filter(FILTERS[knowledge]),\n    [records, knowledge]\n  );\n\n  const [progress, setProgress] = useState<Progress>(() => {\n    const stack = sortImmutable(filteredRecords, answersComparer);\n\n    const actualRecord = stack.pop();\n\n    const actualAnswersSet = actualRecord\n      ? prepareAnswersSet(actualRecord, filteredRecords)\n      : [];\n\n    return { stack, actualRecord, actualAnswersSet };\n  });\n\n  const [actualAnswer, setAnswer] = useState<Answer<DictionaryEntry>>();\n\n  const handleAnswerClick = (answer: Answer<DictionaryEntry>) => {\n    setAnswer(answer);\n    if (onAnswer && progress?.actualRecord)\n      onAnswer({ isCorrect: answer.isCorrect, entity: progress.actualRecord });\n  };\n\n  const handleNextClick = () => {\n    setProgress((state) => {\n      const stack = [...(state?.stack ?? [])];\n\n      const actualRecord = stack.pop();\n\n      const actualAnswersSet = actualRecord\n        ? prepareAnswersSet(actualRecord, filteredRecords ?? [])\n        : [];\n\n      return { stack, actualRecord, actualAnswersSet };\n    });\n    setAnswer(undefined);\n  };\n\n  return (\n    <>\n      {progress?.actualRecord && (\n        <div style={{ textAlign: \"center\" }}>\n          {progress.actualRecord.word} (\n          <i>{progress.actualRecord.partOfSpeech}</i>)\n        </div>\n      )}\n      <ButtonsGrid>\n        {progress?.actualAnswersSet.map((answer) => (\n          <Button\n            key={answer.entity.id}\n            disabled={Boolean(actualAnswer)}\n            onClick={() => handleAnswerClick(answer)}\n            theme={\n              answer.isCorrect && actualAnswer\n                ? \"success\"\n                : !answer.isCorrect && answer === actualAnswer\n                ? \"danger\"\n                : \"secondary\"\n            }\n          >\n            {SELECTORS[knowledge](answer.entity)}\n          </Button>\n        ))}\n      </ButtonsGrid>\n      {actualAnswer && (\n        <>\n          <div>\n            <hr />\n          </div>\n          <Button onClick={handleNextClick}>Next word</Button>\n        </>\n      )}\n    </>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { Answer } from \"./utils\";\nimport { DictionaryEntry, RecordPage } from \"./RecordPage\";\nimport { ListPage } from \"./ListPage\";\nimport { PracticePage } from \"./PracticePage\";\n\nconst VOCABULARY_KEY = \"vocabulary\";\n\nconst StyledApp = styled.div`\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`;\n\nexport function App() {\n  const [items, setItems] = useState<DictionaryEntry[]>([]);\n\n  useEffect(() => {\n    const json = localStorage.getItem(VOCABULARY_KEY);\n    if (!json) return;\n    setItems(JSON.parse(json));\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(VOCABULARY_KEY, JSON.stringify(items));\n  }, [items]);\n\n  const handleAddRecord = (item: DictionaryEntry) =>\n    setItems([{ id: Date.now(), ...item }, ...items]);\n\n  const handleEditRecord = (item: DictionaryEntry) => {\n    const index = items.findIndex((p) => p.id === item.id);\n    const newItems = [...items];\n    newItems[index] = item;\n    setItems(newItems);\n  };\n\n  const handleDeleteRecord = (item: DictionaryEntry) => {\n    setItems(items.filter((p) => p.id !== item.id));\n  };\n\n  const handleAnswer = ({ isCorrect, entity }: Answer<DictionaryEntry>) => {\n    const index = items.findIndex((p) => p.id === entity.id);\n    const newItems = [...items];\n    const oldRecord = newItems[index];\n    newItems[index] = {\n      ...oldRecord,\n      answersCount: oldRecord.answersCount + 1,\n      correctAnswersCount: oldRecord.correctAnswersCount + (isCorrect ? 1 : 0),\n    };\n    setItems(newItems);\n  };\n\n  return (\n    <StyledApp className=\"bg-dark\">\n      <HashRouter>\n        <Switch>\n          <Route path=\"/add\">\n            <RecordPage records={items} onConfirm={handleAddRecord} />\n          </Route>\n          <Route path=\"/edit/:id\">\n            <RecordPage records={items} onConfirm={handleEditRecord} />\n          </Route>\n          <Route path=\"/practice\">\n            <PracticePage records={items} onAnswer={handleAnswer} />\n          </Route>\n          <Route path=\"/\">\n            <ListPage items={items} onDelete={handleDeleteRecord} />\n          </Route>\n        </Switch>\n      </HashRouter>\n    </StyledApp>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"antd/dist/antd.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}