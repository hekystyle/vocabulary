{"version":3,"sources":["services/dictionaryApi.ts","routes/record/DefinitionsList.tsx","reducer.ts","routes/record/Page.tsx","routes/record/Router.tsx","utils.ts","routes/list/Page.tsx","routes/list/index.ts","routes/list/Router.tsx","components/Button.tsx","components/Card.tsx","components/CardBody.tsx","routes/practice/PracticeSession.tsx","routes/practice/useSession.ts","routes/practice/Page.tsx","routes/practice/Router.tsx","NavBar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DictionaryApi","controller","AbortController","this","abort","word","fetch","headers","Accept","signal","response","json","StyledUl","styled","ul","DefinitionsList","props","onPartOfSpeechClick","onDefinitionClick","useState","entry","setEntry","useEffect","api","then","result","catch","reason","console","error","undefined","meanings","map","meaning","i","onClick","partOfSpeech","definitions","definition","j","dictionarySlice","createSlice","name","initialState","reducers","create","reducer","state","action","concat","payload","prepare","id","Date","now","update","findIndex","p","delete","filter","answer","entity","isCorrect","record","find","answersCount","correctAnswersCount","RecordPage","useParams","editedEntry","useSelector","s","parseInt","translation","history","useHistory","navigateRoot","push","dispatch","useDispatch","placeholder","value","onChange","e","target","TextArea","type","actions","danger","values","RecordRouter","path","useRouteMatch","component","to","shuffle","array","sort","Math","random","computeAnswersScore","ListPage","columns","title","dataIndex","ellipsis","showTitle","render","_","PlusOutlined","EditOutlined","onConfirm","DeleteOutlined","items","comparer","sortImmutable","a","b","dataSource","size","rowKey","ListRouter","Button","theme","children","className","rest","Card","CardBody","OverflowableCardBody","PracticeSession","records","computedRecords","r","score","stack","groupWith","list","reduce","acc","current","currentID","pop","selected","setProgress","next","actualRecord","useSession","isAnswerRevealed","setIsAnswerRevealed","handleAnswerButtonClick","Layout","div","PracticePage","PracticeRouter","exact","navItems","NavBar","pathname","useLocation","Navbar","variant","expand","collapseOnSelect","Container","Toggle","style","flexGrow","Collapse","Nav","idx","Link","href","active","onSelect","StyledApp","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","VOCABULARY_KEY","localStorage","getItem","store","configureStore","preloadedState","JSON","parse","subscribe","setItem","stringify","getState","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4ec2433.chunk.js","sourcesContent":["import { ApiResult } from \"types\";\r\n\r\nexport class DictionaryApi {\r\n  private controller = new AbortController();\r\n\r\n  public abort() {\r\n    this.controller.abort();\r\n  }\r\n\r\n  public async word(word: string): Promise<ApiResult> {\r\n    const response = await fetch(\r\n      `https://api.dictionaryapi.dev/api/v2/entries/en_US/${word}`,\r\n      {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n        },\r\n        signal: this.controller.signal,\r\n      }\r\n    );\r\n\r\n    return await response.json();\r\n  }\r\n}\r\n","import { useEffect, useState } from \"react\";\nimport { DictionaryApi } from \"services/dictionaryApi\";\nimport styled from \"styled-components\";\nimport { Word } from \"types\";\n\nconst StyledUl = styled.ul`\n  color: white;\n`;\n\nexport interface DefinitionsListProps {\n  word: string;\n  onPartOfSpeechClick?: (partOfSpeech: string) => void;\n  onDefinitionClick?: (values: {\n    partOfSpeech: string;\n    definition: string;\n  }) => void;\n}\n\nexport function DefinitionsList(props: DefinitionsListProps) {\n  const { word, onPartOfSpeechClick, onDefinitionClick } = props;\n  const [entry, setEntry] = useState<Word | undefined>();\n\n  useEffect(() => {\n    if (word === \"\") {\n      setEntry(undefined);\n      return;\n    }\n    const api = new DictionaryApi();\n    api\n      .word(word)\n      .then((result) => {\n        setEntry(result[0]);\n      })\n      .catch((reason) => console.error(reason));\n\n    return () => api.abort();\n  }, [word]);\n\n  return (\n    <StyledUl>\n      {entry?.meanings.map((meaning, i) => (\n        <li key={i}>\n          <div\n            onClick={() =>\n              onPartOfSpeechClick && onPartOfSpeechClick(meaning.partOfSpeech)\n            }\n          >\n            {meaning.partOfSpeech}\n          </div>\n          <ul>\n            {meaning.definitions.map((definition, j) => (\n              <li\n                key={j}\n                onClick={() =>\n                  onDefinitionClick &&\n                  onDefinitionClick({\n                    partOfSpeech: meaning.partOfSpeech,\n                    definition: definition.definition,\n                  })\n                }\n              >\n                {definition.definition}\n              </li>\n            ))}\n          </ul>\n        </li>\n      ))}\n    </StyledUl>\n  );\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { DictionaryEntry } from \"./types/DictionaryEntry\";\r\nimport { Answer } from \"./utils\";\r\n\r\nexport type AppState = DictionaryEntry[];\r\n\r\nconst initialState: AppState = [];\r\n\r\nexport const dictionarySlice = createSlice({\r\n  name: \"dictionary\",\r\n  initialState,\r\n  reducers: {\r\n    create: {\r\n      reducer: (state, action: PayloadAction<DictionaryEntry>) =>\r\n        state.concat(action.payload),\r\n      prepare: (entry: DictionaryEntry) => {\r\n        return {\r\n          payload: {\r\n            id: Date.now(),\r\n            ...entry,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    update: (state, action: PayloadAction<DictionaryEntry>) => {\r\n      const i = state.findIndex((p) => p.id === action.payload.id);\r\n      if (i > -1) state[i] = action.payload;\r\n      return state;\r\n    },\r\n    delete: (state, action: PayloadAction<DictionaryEntry>) =>\r\n      state.filter((p) => p.id !== action.payload.id),\r\n    answer: (\r\n      state,\r\n      { payload: { entity, isCorrect } }: PayloadAction<Answer<DictionaryEntry>>\r\n    ) => {\r\n      const record = state.find((p) => p.id === entity.id);\r\n      if (record) {\r\n        record.answersCount++;\r\n        if (isCorrect) record.correctAnswersCount++;\r\n      }\r\n    },\r\n  },\r\n});\r\n","import { Button, Input } from \"antd\";\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { DefinitionsList } from \"./DefinitionsList\";\nimport { AppState, dictionarySlice } from \"reducer\";\nimport { DictionaryEntry } from \"types/DictionaryEntry\";\n\nexport interface RecordPageProps {}\n\nexport function RecordPage(props: RecordPageProps) {\n  const { id } = useParams<{ id?: string }>();\n\n  const editedEntry = useSelector<AppState, DictionaryEntry | undefined>((s) =>\n    id ? s.find((p) => p.id === parseInt(id)) : undefined\n  );\n\n  const [entry, setEntry] = useState<DictionaryEntry>({\n    word: \"\",\n    partOfSpeech: \"\",\n    translation: \"\",\n    definition: \"\",\n    answersCount: 0,\n    correctAnswersCount: 0,\n    ...(editedEntry ?? {}),\n  });\n\n  const history = useHistory();\n\n  const navigateRoot = () => history.push(\"/\");\n\n  const dispatch = useDispatch();\n  const handleConfirm = () => {\n    dispatch(\n      id\n        ? dictionarySlice.actions.update(entry)\n        : dictionarySlice.actions.create(entry)\n    );\n    navigateRoot();\n  };\n\n  const handleCancel = () => navigateRoot();\n\n  return (\n    <>\n      <Input\n        placeholder=\"Word\"\n        value={entry.word}\n        onChange={(e) => setEntry({ ...entry, word: e.target.value })}\n      />\n      <Input\n        placeholder=\"Part ot speech\"\n        value={entry.partOfSpeech}\n        onChange={(e) => setEntry({ ...entry, partOfSpeech: e.target.value })}\n      />\n      <Input\n        placeholder=\"Translation\"\n        value={entry.translation}\n        onChange={(e) => setEntry({ ...entry, translation: e.target.value })}\n      />\n      <Input.TextArea\n        placeholder=\"Definition\"\n        value={entry.definition}\n        onChange={(e) => setEntry({ ...entry, definition: e.target.value })}\n      />\n      <Button type=\"primary\" onClick={handleConfirm}>\n        Confirm\n      </Button>\n      <Button type=\"primary\" danger onClick={handleCancel}>\n        Cancel\n      </Button>\n      <DefinitionsList\n        word={entry.word}\n        onPartOfSpeechClick={(partOfSpeech) =>\n          setEntry((entry) => ({ ...entry, partOfSpeech }))\n        }\n        onDefinitionClick={(values) =>\n          setEntry((entry) => ({ ...entry, ...values }))\n        }\n      />\n    </>\n  );\n}\n","import { Redirect, Route, Switch, useRouteMatch } from \"react-router-dom\";\nimport { RecordPage } from \"./Page\";\n\nexport function RecordRouter() {\n  const { path } = useRouteMatch();\n\n  return (\n    <Switch>\n      <Route path={`${path}/:id?`} component={RecordPage} />\n      <Redirect to={`${path}`} />\n    </Switch>\n  );\n}\n","/**\r\n * Shuffle array and return new instance.\r\n */\r\nexport function shuffle<T>(array: T[]): T[] {\r\n  return [...array].sort(() => (Math.random() > 0.5 ? 1 : -1));\r\n}\r\n\r\nexport interface Answer<T> {\r\n  isCorrect: boolean;\r\n  entity: T;\r\n}\r\n\r\nexport function prepareAnswersSet<T>(tested: T, all: T[]): Answer<T>[] {\r\n  const allWithoutTested = all.filter((p) => p !== tested);\r\n  const shufledAllWithoutTested = shuffle(allWithoutTested);\r\n  const incorrects = shufledAllWithoutTested.splice(0, 3);\r\n  const set = [\r\n    { isCorrect: true, entity: tested },\r\n    ...incorrects.map((p) => ({ isCorrect: false, entity: p })),\r\n  ];\r\n  const shufledSet = shuffle(set);\r\n  return shufledSet;\r\n}\r\n\r\nexport function sortImmutable<T>(\r\n  items: T[],\r\n  comparer?: (a: T, b: T) => number\r\n): T[] {\r\n  return [...items].sort(comparer);\r\n}\r\n\r\nexport interface AnswersCountable {\r\n  answersCount: number;\r\n  correctAnswersCount: number;\r\n}\r\n\r\nexport function computeAnswersScore<T extends AnswersCountable>({\r\n  answersCount,\r\n  correctAnswersCount,\r\n}: T): number {\r\n  return answersCount + correctAnswersCount;\r\n}\r\n\r\nexport function answersComparer<T extends AnswersCountable>(a: T, b: T) {\r\n  const [scoreA, scoreB] = [a, b].map(computeAnswersScore);\r\n\r\n  return scoreB - scoreA;\r\n}\r\n\r\nexport interface Definable {\r\n  definition: string;\r\n}\r\n\r\nexport const hasDefinition = (definable: Definable) =>\r\n  definable.definition !== \"\";\r\n\r\nexport interface Translateable {\r\n  translation: string;\r\n}\r\n\r\nexport const hasTranslation = (translateable: Translateable) =>\r\n  translateable.translation !== \"\";\r\n","import { DeleteOutlined, EditOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport { Button, Popconfirm, Tooltip } from \"antd\";\nimport Table, { ColumnsType } from \"antd/lib/table\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { DictionaryEntry } from \"../../types/DictionaryEntry\";\nimport { AppState, dictionarySlice } from \"../../reducer\";\nimport { sortImmutable } from \"../../utils\";\n\nexport interface ListPageProps {}\n\nexport function ListPage(props: ListPageProps) {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const columns: ColumnsType<DictionaryEntry> = [\n    {\n      title: \"Word\",\n      dataIndex: \"word\",\n      ellipsis: { showTitle: true },\n    },\n    {\n      title: (\n        <Tooltip title=\"Total answers / Correct answers\">\n          Total / Correct\n        </Tooltip>\n      ),\n      render: (_, record) => (\n        <>\n          {record.answersCount} / {record.correctAnswersCount}\n        </>\n      ),\n    },\n    {\n      title: () => (\n        <Button type=\"primary\" onClick={() => history.push(\"/record\")}>\n          <PlusOutlined />\n        </Button>\n      ),\n      render: (_, record) => (\n        <>\n          <Button onClick={() => history.push(`/record/${record.id}`)}>\n            <EditOutlined />\n          </Button>\n          <Popconfirm\n            title=\"Are you sure to delete this?\"\n            onConfirm={() => {\n              dispatch(dictionarySlice.actions.delete(record));\n            }}\n          >\n            <Button>\n              <DeleteOutlined />\n            </Button>\n          </Popconfirm>\n        </>\n      ),\n    },\n  ];\n  const items = useSelector<AppState, DictionaryEntry[]>((s) =>\n    sortImmutable(s, (a, b) => (b.id ?? 0) - (a.id ?? 0))\n  );\n  return (\n    <>\n      <Table columns={columns} dataSource={items} size=\"middle\" rowKey=\"id\" />\n    </>\n  );\n}\n","import { ListRouter } from \"./Router\";\n\nexport default ListRouter;\n","import { Route, Switch, useRouteMatch } from \"react-router-dom\";\nimport { ListPage } from \"./Page\";\n\nexport function ListRouter() {\n  const { path } = useRouteMatch();\n\n  return (\n    <Switch>\n      <Route path={`${path}`} component={ListPage} />\n    </Switch>\n  );\n}\n","import { ButtonHTMLAttributes, DetailedHTMLProps } from \"react\";\n\nexport type Theme =\n  | \"primary\"\n  | \"secondary\"\n  | \"success\"\n  | \"warning\"\n  | \"danger\"\n  | \"info\";\n\ntype NativeButtonProps = DetailedHTMLProps<\n  ButtonHTMLAttributes<HTMLButtonElement>,\n  HTMLButtonElement\n>;\n\nexport interface ButtonProps extends NativeButtonProps {\n  /**\n   * @default \"primary\"\n   */\n  theme?: Theme;\n}\n\nexport function Button({ theme, children, className, ...rest }: ButtonProps) {\n  return (\n    <button\n      {...rest}\n      className={`btn btn-${theme ?? \"primary\"} ${className ?? \"\"}`}\n    >\n      {children}\n    </button>\n  );\n}\n","import { FC } from \"react\";\r\n\r\ntype NativeDivProps = React.DetailedHTMLProps<\r\n  React.HTMLAttributes<HTMLDivElement>,\r\n  HTMLDivElement\r\n>;\r\n\r\nexport type CardProps = NativeDivProps;\r\n\r\nexport const Card: FC<CardProps> = ({ children, className, ...rest }) => {\r\n  return (\r\n    <div className={\"card \" + (className ?? \"\")} {...rest}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","import { FC } from \"react\";\r\n\r\ntype NativeDivProps = React.DetailedHTMLProps<\r\n  React.HTMLAttributes<HTMLDivElement>,\r\n  HTMLDivElement\r\n>;\r\n\r\nexport type CardBodyProps = NativeDivProps;\r\n\r\nexport const CardBody: FC<CardBodyProps> = ({\r\n  children,\r\n  className,\r\n  ...rest\r\n}) => {\r\n  return (\r\n    <div className={\"card-body \" + (className ?? \"\")} {...rest}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","import { FC, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { Button } from \"components/Button\";\nimport { Card } from \"components/Card\";\nimport { CardBody } from \"components/CardBody\";\nimport { DictionaryEntry } from \"types/DictionaryEntry\";\nimport { AppState, dictionarySlice } from \"reducer\";\nimport { useSession } from \"./useSession\";\n\nconst OverflowableCardBody = styled(CardBody)`\n  overflow: auto;\n`;\n\ninterface PracticeSessionProps {}\n\nexport const PracticeSession: FC<PracticeSessionProps> = () => {\n  const records = useSelector<AppState, DictionaryEntry[]>((s) => s);\n\n  const { selected, next } = useSession(records);\n\n  const [isAnswerRevealed, setIsAnswerRevealed] = useState(false);\n\n  const actualRecord = records.find((r) => r.id === selected);\n\n  const handleRevealAnswer = () => setIsAnswerRevealed(true);\n\n  const dispatch = useDispatch();\n  const handleAnswerButtonClick = (isCorrect: boolean) => {\n    if (actualRecord)\n      dispatch(\n        dictionarySlice.actions.answer({\n          isCorrect,\n          entity: actualRecord,\n        })\n      );\n    setIsAnswerRevealed(false);\n    next();\n  };\n\n  if (!actualRecord) return null;\n  return (\n    <>\n      <Card>\n        <CardBody className=\"text-center\">\n          <div>{actualRecord.translation}</div>\n          <div>\n            (<i>{actualRecord.partOfSpeech}</i>)\n          </div>\n        </CardBody>\n      </Card>\n      <Card>\n        <OverflowableCardBody className=\"text-center\">\n          {actualRecord.definition}\n        </OverflowableCardBody>\n      </Card>\n      <Card>\n        <CardBody className=\"text-center\">\n          {isAnswerRevealed ? actualRecord.word : \"?\"}\n        </CardBody>\n      </Card>\n      {!isAnswerRevealed ? (\n        <Button onClick={handleRevealAnswer}>Reveal answer</Button>\n      ) : (\n        <>\n          <Button theme=\"success\" onClick={() => handleAnswerButtonClick(true)}>\n            I was correct\n          </Button>\n          <Button theme=\"danger\" onClick={() => handleAnswerButtonClick(false)}>\n            I was incorrect\n          </Button>\n        </>\n      )}\n    </>\n  );\n};\n","import { groupWith } from \"ramda\";\r\nimport { useState } from \"react\";\r\nimport { DictionaryEntry } from \"types/DictionaryEntry\";\r\nimport {\r\n  computeAnswersScore,\r\n  hasDefinition,\r\n  hasTranslation,\r\n  shuffle,\r\n} from \"utils\";\r\n\r\ninterface Session {\r\n  stack: number[];\r\n  selected: number | undefined;\r\n}\r\n\r\nexport const useSession = (records: DictionaryEntry[]) => {\r\n  const [{ selected }, setProgress] = useState<Session>(() => {\r\n    const filteredRecords = records.filter(\r\n      (p) => hasTranslation(p) || hasDefinition(p)\r\n    );\r\n\r\n    const computedRecords = filteredRecords.map((r) => ({\r\n      id: r.id,\r\n      score: computeAnswersScore(r),\r\n    }));\r\n\r\n    const stack = groupWith((a, b) => a.score === b.score, computedRecords)\r\n      .map((list) => shuffle(list))\r\n      .reduce<number[]>(\r\n        (acc, current) => [\r\n          ...acc,\r\n          ...current.map((p) => p.id ?? -1).filter((id) => id !== -1),\r\n        ],\r\n        []\r\n      );\r\n\r\n    const currentID = stack.pop();\r\n\r\n    return { stack, selected: currentID };\r\n  });\r\n\r\n  return {\r\n    selected,\r\n    next: () =>\r\n      setProgress((state) => {\r\n        const stack = [...(state?.stack ?? [])];\r\n\r\n        const actualRecord = stack.pop();\r\n\r\n        return { stack, selected: actualRecord };\r\n      }),\r\n  };\r\n};\r\n","import { useHistory } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { Button } from \"components/Button\";\nimport { PracticeSession } from \"./PracticeSession\";\n\nconst Layout = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n`;\n\nexport interface PracticePageProps {}\n\nexport function PracticePage(props: PracticePageProps) {\n  const history = useHistory();\n  return (\n    <Layout>\n      <PracticeSession />\n      <Button onClick={() => history.push(\"/\")}>End practice</Button>\n    </Layout>\n  );\n}\n","import { Redirect, Route, Switch, useRouteMatch } from \"react-router-dom\";\nimport { PracticePage } from \"./Page\";\n\nexport function PracticeRouter() {\n  const { path } = useRouteMatch();\n\n  return (\n    <Switch>\n      <Route path={`${path}`} exact component={PracticePage} />\n      <Redirect to={path} />\n    </Switch>\n  );\n}\n","import React, { FC } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { Container, Nav, Navbar } from \"react-bootstrap\";\n\ninterface NavLink {\n  title: React.ReactNode;\n  path: string;\n}\n\nconst navItems: NavLink[] = [\n  {\n    title: \"List\",\n    path: \"/list\",\n  },\n  {\n    title: \"Practice\",\n    path: \"/practice\",\n  },\n];\n\nexport const NavBar: FC<{}> = () => {\n  const history = useHistory();\n\n  const { pathname } = useLocation();\n  return (\n    <Navbar variant=\"dark\" expand=\"lg\" collapseOnSelect>\n      <Container>\n        <Navbar.Toggle style={{ flexGrow: 1 }} />\n        <Navbar.Collapse>\n          <Nav>\n            {navItems.map(({ title, path }, idx) => (\n              <Nav.Link\n                key={idx}\n                href=\"#\"\n                active={path === pathname}\n                onSelect={() => history.push(path)}\n              >\n                {title}\n              </Nav.Link>\n            ))}\n          </Nav>\n        </Navbar.Collapse>\n      </Container>\n    </Navbar>\n  );\n};\n","import { HashRouter, Redirect, Route, Switch } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { RecordRouter } from \"routes/record/Router\";\nimport ListRouter from \"./routes/list\";\nimport { PracticeRouter } from \"routes/practice/Router\";\nimport { NavBar } from \"NavBar\";\n\nconst StyledApp = styled.div`\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  font-size: calc(10px + 2vmin);\n`;\n\nexport function App() {\n  return (\n    <HashRouter>\n      <StyledApp className=\"bg-dark\">\n        <NavBar />\n        <Switch>\n          <Route path=\"/record\" component={RecordRouter} />\n          <Route path=\"/practice\" component={PracticeRouter} />\n          <Route path=\"/list\" component={ListRouter} />\n          <Redirect to=\"/list\" />\n        </Switch>\n      </StyledApp>\n    </HashRouter>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"antd/dist/antd.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { Provider } from \"react-redux\";\nimport { dictionarySlice } from \"./reducer\";\n\nconst VOCABULARY_KEY = \"vocabulary\";\n\nconst json = localStorage.getItem(VOCABULARY_KEY);\n\nconst store = configureStore({\n  reducer: dictionarySlice.reducer,\n  preloadedState: json ? JSON.parse(json) : undefined,\n});\n\nstore.subscribe(() => {\n  localStorage.setItem(VOCABULARY_KEY, JSON.stringify(store.getState()));\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}